_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[17],{NbQA:function(e,n,t){"use strict";t.r(n);var r=t("o0o1"),a=t.n(r),i=t("HaE+"),o=t("SoUo"),u=256,c=[4,4];function s(){return(s=Object(i.a)(a.a.mark((function e(n,r){var i,o,s,p,l,f,m,g,b,v,h,x,w,B,P,y,G,U,I,D,T,S,k,C,M,_,E,V;return a.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,navigator.gpu.requestAdapter();case 2:return i=e.sent,e.next=5,i.requestDevice();case 5:return o=e.sent,s=n.getContext("gpupresent"),p="bgra8unorm",l=new Float32Array([1,1,0,1,0,1,-1,0,1,1,-1,-1,0,0,1,1,1,0,1,0,-1,-1,0,0,1,-1,1,0,0,0]),f=o.createBuffer({size:l.byteLength,usage:GPUBufferUsage.VERTEX,mappedAtCreation:!0}),new Float32Array(f.getMappedRange()).set(l),f.unmap(),m=s.configureSwapChain({device:o,format:p}),g=o.createComputePipeline({compute:{module:o.createShaderModule({code:d.blur}),entryPoint:"main"}}),b=o.createRenderPipeline({vertex:{module:o.createShaderModule({code:d.vertex}),entryPoint:"main",buffers:[{arrayStride:20,attributes:[{shaderLocation:0,offset:0,format:"float32x3"},{shaderLocation:1,offset:12,format:"float32x2"}]}]},fragment:{module:o.createShaderModule({code:d.fragment}),entryPoint:"main",targets:[{format:p}]},primitive:{topology:"triangle-list"}}),v=o.createSampler({magFilter:"linear",minFilter:"linear"}),(h=document.createElement("img")).src=t("neuz"),e.next=20,h.decode();case 20:return e.next=22,createImageBitmap(h);case 22:return x=e.sent,w=[x.width,x.height],B=w[0],P=w[1],y=o.createTexture({size:[B,P,1],format:"rgba8unorm",usage:GPUTextureUsage.SAMPLED|GPUTextureUsage.COPY_DST}),o.queue.copyImageBitmapToTexture({imageBitmap:x},{texture:y},[x.width,x.height,1]),G=[0,1].map((function(){return o.createTexture({size:{width:B,height:P},format:"rgba8unorm",usage:GPUTextureUsage.COPY_DST|GPUTextureUsage.STORAGE|GPUTextureUsage.SAMPLED})})),U=function(){var e=o.createBuffer({size:4,mappedAtCreation:!0,usage:GPUBufferUsage.UNIFORM});return new Uint32Array(e.getMappedRange())[0]=0,e.unmap(),e}(),I=function(){var e=o.createBuffer({size:4,mappedAtCreation:!0,usage:GPUBufferUsage.UNIFORM});return new Uint32Array(e.getMappedRange())[0]=1,e.unmap(),e}(),D=o.createBuffer({size:8,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM}),T=o.createBindGroup({layout:g.getBindGroupLayout(0),entries:[{binding:0,resource:v},{binding:1,resource:{buffer:D}}]}),S=o.createBindGroup({layout:g.getBindGroupLayout(1),entries:[{binding:1,resource:y.createView()},{binding:2,resource:G[0].createView()},{binding:3,resource:{buffer:U}}]}),k=o.createBindGroup({layout:g.getBindGroupLayout(1),entries:[{binding:1,resource:G[0].createView()},{binding:2,resource:G[1].createView()},{binding:3,resource:{buffer:I}}]}),C=o.createBindGroup({layout:g.getBindGroupLayout(1),entries:[{binding:1,resource:G[1].createView()},{binding:2,resource:G[0].createView()},{binding:3,resource:{buffer:U}}]}),M=o.createBindGroup({layout:b.getBindGroupLayout(0),entries:[{binding:0,resource:v},{binding:1,resource:G[1].createView()}]}),_={filterSize:15,iterations:2},V=function(){E=u-(_.filterSize-1),o.queue.writeBuffer(D,0,new Uint32Array([_.filterSize,E]))},r.add(_,"filterSize",1,33).step(2).onChange(V),r.add(_,"iterations",1,10).step(1),V(),e.abrupt("return",(function(){var e=o.createCommandEncoder(),n=e.beginComputePass();n.setPipeline(g),n.setBindGroup(0,T),n.setBindGroup(1,S),n.dispatch(Math.ceil(B/E),Math.ceil(P/c[1])),n.setBindGroup(1,k),n.dispatch(Math.ceil(P/E),Math.ceil(B/c[1]));for(var t=0;t<_.iterations-1;++t)n.setBindGroup(1,C),n.dispatch(Math.ceil(B/E),Math.ceil(P/c[1])),n.setBindGroup(1,k),n.dispatch(Math.ceil(P/E),Math.ceil(B/c[1]));n.endPass();var r=e.beginRenderPass({colorAttachments:[{view:m.getCurrentTexture().createView(),loadValue:{r:0,g:0,b:0,a:1},storeOp:"store"}]});r.setBindGroup(0,M),r.setPipeline(b),r.setVertexBuffer(0,f),r.setBindGroup(0,M),r.draw(6,1,0,0),r.endPass(),o.queue.submit([e.finish()])}));case 41:case"end":return e.stop()}}),e)})))).apply(this,arguments)}var d={blur:"\n  [[block]] struct Params {\n    filterDim : u32;\n    blockDim : u32;\n  };\n\n  [[group(0), binding(0)]] var samp : sampler;\n  [[group(0), binding(1)]] var<uniform> params : Params;\n  [[group(1), binding(1)]] var inputTex : texture_2d<f32>;\n  [[group(1), binding(2)]] var outputTex : [[access(write)]] texture_storage_2d<rgba8unorm>;\n\n  [[block]] struct Flip {\n    value : u32;\n  };\n  [[group(1), binding(3)]] var<uniform> flip : Flip;\n\n  // This shader blurs the input texture in one direction, depending on whether\n  // |flip.value| is 0 or 1.\n  // It does so by running ".concat(u/c[0]," threads per workgroup to load ").concat(u,"\n  // texels into ").concat(c[1]," rows of shared memory. Each thread loads a\n  // ").concat(c[0]," x ").concat(c[1]," block of texels to take advantage of the texture sampling\n  // hardware.\n  // Then, each thread computes the blur result by averaging the adjacent texel values\n  // in shared memory.\n  // Because we're operating on a subset of the texture, we cannot compute all of the\n  // results since not all of the neighbors are available in shared memory.\n  // Specifically, with ").concat(u," x ").concat(u," tiles, we can only compute and write out\n  // square blocks of size ").concat(u," - (filterSize - 1). We compute the number of blocks\n  // needed and dispatch that amount.\n\n  var<workgroup> tile : array<array<vec3<f32>, ").concat(u,">, ").concat(c[1],">;\n\n  [[stage(compute), workgroup_size(").concat(u/c[0],", 1, 1)]]\n  fn main(\n    [[builtin(workgroup_id)]] WorkGroupID : vec3<u32>,\n    [[builtin(local_invocation_id)]] LocalInvocationID : vec3<u32>\n  ) {\n    let filterOffset : u32 = (params.filterDim - 1u) / 2u;\n    let dims : vec2<i32> = textureDimensions(inputTex, 0);\n\n    let baseIndex : vec2<i32> = vec2<i32>(\n      WorkGroupID.xy * vec2<u32>(params.blockDim, ").concat(c[1],"u) +\n      LocalInvocationID.xy * vec2<u32>(").concat(c[0],"u, 1u)\n    ) - vec2<i32>(i32(filterOffset), 0);\n\n    for (var r : u32 = 0u; r < ").concat(c[1],"u; r = r + 1u) {\n      for (var c : u32 = 0u; c < ").concat(c[0],"u; c = c + 1u) {\n        var loadIndex : vec2<i32> = baseIndex + vec2<i32>(i32(c), i32(r));\n        if (flip.value != 0u) {\n          loadIndex = loadIndex.yx;\n        }\n\n        tile[r][").concat(c[0],"u * LocalInvocationID.x + c] =\n          textureSampleLevel(inputTex, samp,\n            (vec2<f32>(loadIndex) + vec2<f32>(0.25, 0.25)) / vec2<f32>(dims), 0.0).rgb;\n      }\n    }\n\n    workgroupBarrier();\n\n    for (var r : u32 = 0u; r < ").concat(c[1],"u; r = r + 1u) {\n      for (var c : u32 = 0u; c < ").concat(c[0],"u; c = c + 1u) {\n        var writeIndex : vec2<i32> = baseIndex + vec2<i32>(i32(c), i32(r));\n        if (flip.value != 0u) {\n          writeIndex = writeIndex.yx;\n        }\n\n        let center : u32 = ").concat(c[0],"u * LocalInvocationID.x + c;\n        if (center >= filterOffset &&\n            center < ").concat(u,"u - filterOffset &&\n            all(writeIndex < dims)) {\n          var acc : vec3<f32> = vec3<f32>(0.0, 0.0, 0.0);\n          for (var f : u32 = 0u; f < params.filterDim; f = f + 1u) {\n            var i : u32 = center + f - filterOffset;\n            acc = acc + (1.0 / f32(params.filterDim)) * tile[r][i];\n          }\n          textureStore(outputTex, writeIndex, vec4<f32>(acc, 1.0));\n        }\n      }\n    }\n  }\n  "),vertex:"\n[[location(0)]] var<out> fragUV : vec2<f32>;\n[[builtin(position)]] var<out> Position : vec4<f32>;\n\n[[stage(vertex)]]\nfn main(\n  [[location(0)]] position : vec3<f32>,\n  [[location(1)]] uv : vec2<f32>\n) {\n  Position = vec4<f32>(position, 1.0);\n  fragUV = uv;\n}\n",fragment:"\n[[group(0), binding(0)]] var mySampler : sampler;\n[[group(0), binding(1)]] var myTexture : texture_2d<f32>;\n\n[[location(0)]] var<out> outColor : vec4<f32>;\n\n[[stage(fragment)]]\nfn main([[location(0)]] fragUV : vec2<f32>) {\n  outColor = textureSample(myTexture, mySampler, fragUV);\n}\n"};n.default=Object(o.c)({name:"Image Blur",description:"This example shows how to blur an image using a WebGPU compute shader.",slug:"imageBlur",init:function(e,n){return s.apply(this,arguments)},source:"import type { GUI } from 'dat.gui';\nimport { makeBasicExample } from '../../components/basicExample';\n\nconst tileDim = 256;\nconst batch = [4, 4];\n\nasync function init(canvas: HTMLCanvasElement, gui?: GUI) {\n  const adapter = await navigator.gpu.requestAdapter();\n  const device = await adapter.requestDevice();\n  const context = canvas.getContext('gpupresent');\n\n  const swapChainFormat = 'bgra8unorm';\n\n  // prettier-ignore\n  const rectVerts = new Float32Array([\n    1.0,  1.0, 0.0, 1.0, 0.0,\n    1.0, -1.0, 0.0, 1.0, 1.0,\n    -1.0, -1.0, 0.0, 0.0, 1.0,\n    1.0,  1.0, 0.0, 1.0, 0.0,\n    -1.0, -1.0, 0.0, 0.0, 1.0,\n    -1.0,  1.0, 0.0, 0.0, 0.0,\n  ]);\n\n  const verticesBuffer = device.createBuffer({\n    size: rectVerts.byteLength,\n    usage: GPUBufferUsage.VERTEX,\n    mappedAtCreation: true,\n  });\n  new Float32Array(verticesBuffer.getMappedRange()).set(rectVerts);\n  verticesBuffer.unmap();\n\n  const swapChain = context.configureSwapChain({\n    device,\n    format: swapChainFormat,\n  });\n\n  const blurPipeline = device.createComputePipeline({\n    compute: {\n      module: device.createShaderModule({\n        code: wgslShaders.blur,\n      }),\n      entryPoint: 'main',\n    },\n  });\n\n  const pipeline = device.createRenderPipeline({\n    vertex: {\n      module: device.createShaderModule({\n        code: wgslShaders.vertex,\n      }),\n      entryPoint: 'main',\n      buffers: [\n        {\n          arrayStride: 20,\n          attributes: [\n            {\n              // position\n              shaderLocation: 0,\n              offset: 0,\n              format: 'float32x3',\n            },\n            {\n              // uv\n              shaderLocation: 1,\n              offset: 12,\n              format: 'float32x2',\n            },\n          ],\n        },\n      ],\n    },\n    fragment: {\n      module: device.createShaderModule({\n        code: wgslShaders.fragment,\n      }),\n      entryPoint: 'main',\n      targets: [\n        {\n          format: swapChainFormat,\n        },\n      ],\n    },\n    primitive: {\n      topology: 'triangle-list',\n    },\n  });\n\n  const sampler = device.createSampler({\n    magFilter: 'linear',\n    minFilter: 'linear',\n  });\n\n  const img = document.createElement('img');\n  img.src = require('../../../assets/img/Di-3d.png');\n  await img.decode();\n  const imageBitmap = await createImageBitmap(img);\n\n  const [srcWidth, srcHeight] = [imageBitmap.width, imageBitmap.height];\n  const cubeTexture = device.createTexture({\n    size: [srcWidth, srcHeight, 1],\n    format: 'rgba8unorm',\n    usage: GPUTextureUsage.SAMPLED | GPUTextureUsage.COPY_DST,\n  });\n  device.queue.copyImageBitmapToTexture(\n    { imageBitmap },\n    { texture: cubeTexture },\n    [imageBitmap.width, imageBitmap.height, 1]\n  );\n\n  const textures = [0, 1].map(() => {\n    return device.createTexture({\n      size: {\n        width: srcWidth,\n        height: srcHeight,\n      },\n      format: 'rgba8unorm',\n      usage:\n        GPUTextureUsage.COPY_DST |\n        GPUTextureUsage.STORAGE |\n        GPUTextureUsage.SAMPLED,\n    });\n  });\n\n  const buffer0 = (() => {\n    const buffer = device.createBuffer({\n      size: 4,\n      mappedAtCreation: true,\n      usage: GPUBufferUsage.UNIFORM,\n    });\n    new Uint32Array(buffer.getMappedRange())[0] = 0;\n    buffer.unmap();\n    return buffer;\n  })();\n\n  const buffer1 = (() => {\n    const buffer = device.createBuffer({\n      size: 4,\n      mappedAtCreation: true,\n      usage: GPUBufferUsage.UNIFORM,\n    });\n    new Uint32Array(buffer.getMappedRange())[0] = 1;\n    buffer.unmap();\n    return buffer;\n  })();\n\n  const blurParamsBuffer = device.createBuffer({\n    size: 8,\n    usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.UNIFORM,\n  });\n\n  const computeConstants = device.createBindGroup({\n    layout: blurPipeline.getBindGroupLayout(0),\n    entries: [\n      {\n        binding: 0,\n        resource: sampler,\n      },\n      {\n        binding: 1,\n        resource: {\n          buffer: blurParamsBuffer,\n        },\n      },\n    ],\n  });\n\n  const computeBindGroup0 = device.createBindGroup({\n    layout: blurPipeline.getBindGroupLayout(1),\n    entries: [\n      {\n        binding: 1,\n        resource: cubeTexture.createView(),\n      },\n      {\n        binding: 2,\n        resource: textures[0].createView(),\n      },\n      {\n        binding: 3,\n        resource: {\n          buffer: buffer0,\n        },\n      },\n    ],\n  });\n\n  const computeBindGroup1 = device.createBindGroup({\n    layout: blurPipeline.getBindGroupLayout(1),\n    entries: [\n      {\n        binding: 1,\n        resource: textures[0].createView(),\n      },\n      {\n        binding: 2,\n        resource: textures[1].createView(),\n      },\n      {\n        binding: 3,\n        resource: {\n          buffer: buffer1,\n        },\n      },\n    ],\n  });\n\n  const computeBindGroup2 = device.createBindGroup({\n    layout: blurPipeline.getBindGroupLayout(1),\n    entries: [\n      {\n        binding: 1,\n        resource: textures[1].createView(),\n      },\n      {\n        binding: 2,\n        resource: textures[0].createView(),\n      },\n      {\n        binding: 3,\n        resource: {\n          buffer: buffer0,\n        },\n      },\n    ],\n  });\n\n  const uniformBindGroup = device.createBindGroup({\n    layout: pipeline.getBindGroupLayout(0),\n    entries: [\n      {\n        binding: 0,\n        resource: sampler,\n      },\n      {\n        binding: 1,\n        resource: textures[1].createView(),\n      },\n    ],\n  });\n\n  const settings = {\n    filterSize: 15,\n    iterations: 2,\n  };\n\n  let blockDim: number;\n  const updateSettings = () => {\n    blockDim = tileDim - (settings.filterSize - 1);\n    device.queue.writeBuffer(\n      blurParamsBuffer,\n      0,\n      new Uint32Array([settings.filterSize, blockDim])\n    );\n  };\n  gui.add(settings, 'filterSize', 1, 33).step(2).onChange(updateSettings);\n  gui.add(settings, 'iterations', 1, 10).step(1);\n\n  updateSettings();\n\n  return function frame() {\n    const commandEncoder = device.createCommandEncoder();\n\n    const computePass = commandEncoder.beginComputePass();\n    computePass.setPipeline(blurPipeline);\n    computePass.setBindGroup(0, computeConstants);\n\n    computePass.setBindGroup(1, computeBindGroup0);\n    computePass.dispatch(\n      Math.ceil(srcWidth / blockDim),\n      Math.ceil(srcHeight / batch[1])\n    );\n\n    computePass.setBindGroup(1, computeBindGroup1);\n    computePass.dispatch(\n      Math.ceil(srcHeight / blockDim),\n      Math.ceil(srcWidth / batch[1])\n    );\n\n    for (let i = 0; i < settings.iterations - 1; ++i) {\n      computePass.setBindGroup(1, computeBindGroup2);\n      computePass.dispatch(\n        Math.ceil(srcWidth / blockDim),\n        Math.ceil(srcHeight / batch[1])\n      );\n\n      computePass.setBindGroup(1, computeBindGroup1);\n      computePass.dispatch(\n        Math.ceil(srcHeight / blockDim),\n        Math.ceil(srcWidth / batch[1])\n      );\n    }\n\n    computePass.endPass();\n\n    const passEncoder = commandEncoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: swapChain.getCurrentTexture().createView(),\n          loadValue: { r: 0.0, g: 0.0, b: 0.0, a: 1.0 },\n          storeOp: 'store',\n        },\n      ],\n    });\n    passEncoder.setBindGroup(0, uniformBindGroup);\n    passEncoder.setPipeline(pipeline);\n    passEncoder.setVertexBuffer(0, verticesBuffer);\n    passEncoder.setBindGroup(0, uniformBindGroup);\n    passEncoder.draw(6, 1, 0, 0);\n    passEncoder.endPass();\n    device.queue.submit([commandEncoder.finish()]);\n  };\n}\n\nconst wgslShaders = {\n  // prettier-ignore\n  blur: `\n  [[block]] struct Params {\n    filterDim : u32;\n    blockDim : u32;\n  };\n\n  [[group(0), binding(0)]] var samp : sampler;\n  [[group(0), binding(1)]] var<uniform> params : Params;\n  [[group(1), binding(1)]] var inputTex : texture_2d<f32>;\n  [[group(1), binding(2)]] var outputTex : [[access(write)]] texture_storage_2d<rgba8unorm>;\n\n  [[block]] struct Flip {\n    value : u32;\n  };\n  [[group(1), binding(3)]] var<uniform> flip : Flip;\n\n  // This shader blurs the input texture in one direction, depending on whether\n  // |flip.value| is 0 or 1.\n  // It does so by running ${tileDim / batch[0]} threads per workgroup to load ${tileDim}\n  // texels into ${batch[1]} rows of shared memory. Each thread loads a\n  // ${batch[0]} x ${batch[1]} block of texels to take advantage of the texture sampling\n  // hardware.\n  // Then, each thread computes the blur result by averaging the adjacent texel values\n  // in shared memory.\n  // Because we're operating on a subset of the texture, we cannot compute all of the\n  // results since not all of the neighbors are available in shared memory.\n  // Specifically, with ${tileDim} x ${tileDim} tiles, we can only compute and write out\n  // square blocks of size ${tileDim} - (filterSize - 1). We compute the number of blocks\n  // needed and dispatch that amount.\n\n  var<workgroup> tile : array<array<vec3<f32>, ${tileDim}>, ${batch[1]}>;\n\n  [[stage(compute), workgroup_size(${tileDim / batch[0]}, 1, 1)]]\n  fn main(\n    [[builtin(workgroup_id)]] WorkGroupID : vec3<u32>,\n    [[builtin(local_invocation_id)]] LocalInvocationID : vec3<u32>\n  ) {\n    let filterOffset : u32 = (params.filterDim - 1u) / 2u;\n    let dims : vec2<i32> = textureDimensions(inputTex, 0);\n\n    let baseIndex : vec2<i32> = vec2<i32>(\n      WorkGroupID.xy * vec2<u32>(params.blockDim, ${batch[1]}u) +\n      LocalInvocationID.xy * vec2<u32>(${batch[0]}u, 1u)\n    ) - vec2<i32>(i32(filterOffset), 0);\n\n    for (var r : u32 = 0u; r < ${batch[1]}u; r = r + 1u) {\n      for (var c : u32 = 0u; c < ${batch[0]}u; c = c + 1u) {\n        var loadIndex : vec2<i32> = baseIndex + vec2<i32>(i32(c), i32(r));\n        if (flip.value != 0u) {\n          loadIndex = loadIndex.yx;\n        }\n\n        tile[r][${batch[0]}u * LocalInvocationID.x + c] =\n          textureSampleLevel(inputTex, samp,\n            (vec2<f32>(loadIndex) + vec2<f32>(0.25, 0.25)) / vec2<f32>(dims), 0.0).rgb;\n      }\n    }\n\n    workgroupBarrier();\n\n    for (var r : u32 = 0u; r < ${batch[1]}u; r = r + 1u) {\n      for (var c : u32 = 0u; c < ${batch[0]}u; c = c + 1u) {\n        var writeIndex : vec2<i32> = baseIndex + vec2<i32>(i32(c), i32(r));\n        if (flip.value != 0u) {\n          writeIndex = writeIndex.yx;\n        }\n\n        let center : u32 = ${batch[0]}u * LocalInvocationID.x + c;\n        if (center >= filterOffset &&\n            center < ${tileDim}u - filterOffset &&\n            all(writeIndex < dims)) {\n          var acc : vec3<f32> = vec3<f32>(0.0, 0.0, 0.0);\n          for (var f : u32 = 0u; f < params.filterDim; f = f + 1u) {\n            var i : u32 = center + f - filterOffset;\n            acc = acc + (1.0 / f32(params.filterDim)) * tile[r][i];\n          }\n          textureStore(outputTex, writeIndex, vec4<f32>(acc, 1.0));\n        }\n      }\n    }\n  }\n  `,\n\n  vertex: `\n[[location(0)]] var<out> fragUV : vec2<f32>;\n[[builtin(position)]] var<out> Position : vec4<f32>;\n\n[[stage(vertex)]]\nfn main(\n  [[location(0)]] position : vec3<f32>,\n  [[location(1)]] uv : vec2<f32>\n) {\n  Position = vec4<f32>(position, 1.0);\n  fragUV = uv;\n}\n`,\n\n  fragment: `\n[[group(0), binding(0)]] var mySampler : sampler;\n[[group(0), binding(1)]] var myTexture : texture_2d<f32>;\n\n[[location(0)]] var<out> outColor : vec4<f32>;\n\n[[stage(fragment)]]\nfn main([[location(0)]] fragUV : vec2<f32>) {\n  outColor = textureSample(myTexture, mySampler, fragUV);\n}\n`,\n};\n\nexport default makeBasicExample({\n  name: 'Image Blur',\n  description:\n    'This example shows how to blur an image using a WebGPU compute shader.',\n  slug: 'imageBlur',\n  init,\n  source: __SOURCE__,\n  gui: true,\n});\n",gui:!0})},neuz:function(e,n){e.exports="/webgpu-samples/_next/static/e04932ba9c013b60ddb249577c386914.png"},tGaW:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/samples/imageBlur",function(){return t("NbQA")}])}},[["tGaW",0,1,4,2,3]]]);