_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[18],{"1uVF":function(e,n,t){"use strict";t.d(n,"f",(function(){return r})),t.d(n,"b",(function(){return a})),t.d(n,"a",(function(){return o})),t.d(n,"c",(function(){return i})),t.d(n,"e",(function(){return s})),t.d(n,"d",(function(){return c}));var r=40,a=0,o=16,i=32,s=36,c=new Float32Array([1,-1,1,1,1,0,1,1,1,1,-1,-1,1,1,0,0,1,1,0,1,-1,-1,-1,1,0,0,0,1,0,0,1,-1,-1,1,1,0,0,1,1,0,1,-1,1,1,1,0,1,1,1,1,-1,-1,-1,1,0,0,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,0,1,1,0,1,1,-1,-1,1,1,0,0,1,0,0,1,1,-1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,-1,-1,1,1,0,0,1,0,0,-1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,-1,1,1,1,0,1,0,0,-1,1,-1,1,0,1,0,1,1,0,-1,1,1,1,0,1,1,1,1,1,1,1,-1,1,1,1,0,1,0,0,-1,-1,1,1,0,0,1,1,1,1,-1,1,1,1,0,1,1,1,0,1,-1,1,-1,1,0,1,0,1,0,0,-1,-1,-1,1,0,0,0,1,1,0,-1,-1,1,1,0,0,1,1,1,1,-1,1,-1,1,0,1,0,1,0,0,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,0,1,1,1,0,1,-1,-1,1,1,0,0,1,1,0,0,-1,-1,1,1,0,0,1,1,0,0,1,-1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,-1,-1,1,1,0,0,1,1,1,-1,-1,-1,1,0,0,0,1,0,1,-1,1,-1,1,0,1,0,1,0,0,1,1,-1,1,1,1,0,1,1,0,1,-1,-1,1,1,0,0,1,1,1,-1,1,-1,1,0,1,0,1,0,0])},"8cDV":function(e,n,t){"use strict";t.r(n);var r=t("o0o1"),a=t.n(r),o=t("HaE+"),i=t("IOcx"),s=t("1uVF"),c=t("SoUo");function u(){return(u=Object(o.a)(a.a.mark((function e(n){var t,r,o,c,u,d,p,m,l,x,g,v,h,b,w,M,C,y,P,V,E,B,S,T,O;return a.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return O=function(){for(var e=Date.now()/1e3,n=0,t=0,r=0;r<g;r++)for(var a=0;a<v;a++)i.a.rotate(T,y[t],1,i.b.fromValues(Math.sin((r+.5)*e),Math.cos((a+.5)*e),0)),i.a.multiply(T,S,T),i.a.multiply(T,c,T),P.set(T,n),t++,n+=b},e.next=3,navigator.gpu.requestAdapter();case 3:return t=e.sent,e.next=6,t.requestDevice();case 6:for(r=e.sent,o=Math.abs(n.width/n.height),c=i.a.create(),i.a.perspective(c,2*Math.PI/5,o,1,100),u=n.getContext("gpupresent"),d=u.configureSwapChain({device:r,format:"bgra8unorm"}),p=r.createBuffer({size:s.d.byteLength,usage:GPUBufferUsage.VERTEX,mappedAtCreation:!0}),new Float32Array(p.getMappedRange()).set(s.d),p.unmap(),m=r.createRenderPipeline({vertex:{module:r.createShaderModule({code:f.vertex}),entryPoint:"main",buffers:[{arrayStride:s.f,stepMode:"vertex",attributes:[{shaderLocation:0,offset:s.b,format:"float32x4"},{shaderLocation:1,offset:s.a,format:"float32x4"}]}]},fragment:{module:r.createShaderModule({code:f.fragment}),entryPoint:"main",targets:[{format:"bgra8unorm"}]},primitive:{topology:"triangle-list",cullMode:"back"},depthStencil:{depthWriteEnabled:!0,depthCompare:"less",format:"depth24plus-stencil8"}}),l=r.createTexture({size:{width:n.width,height:n.height},format:"depth24plus-stencil8",usage:GPUTextureUsage.RENDER_ATTACHMENT}),x={colorAttachments:[{view:void 0,loadValue:{r:.5,g:.5,b:.5,a:1},storeOp:"store"}],depthStencilAttachment:{view:l.createView(),depthLoadValue:1,depthStoreOp:"store",stencilLoadValue:0,stencilStoreOp:"store"}},w=(h=(g=4)*(v=4))*(4*(b=16)),M=r.createBuffer({size:w,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),C=r.createBindGroup({layout:m.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:M}}]}),y=new Array(h),P=new Float32Array(b*h),4,V=0,E=0;E<g;E++)for(B=0;B<v;B++)y[V]=i.a.create(),i.a.translate(y[V],y[V],i.b.fromValues(4*(E-g/2+.5),4*(B-v/2+.5),0)),V++;return S=i.a.create(),i.a.translate(S,S,i.b.fromValues(0,0,-12)),T=i.a.create(),e.abrupt("return",(function(){O(),r.queue.writeBuffer(M,0,P.buffer,P.byteOffset,P.byteLength),x.colorAttachments[0].view=d.getCurrentTexture().createView();var e=r.createCommandEncoder(),n=e.beginRenderPass(x);n.setPipeline(m),n.setVertexBuffer(0,p),n.setBindGroup(0,C),n.draw(s.e,h,0,0),n.endPass(),r.queue.submit([e.finish()])}));case 35:case"end":return e.stop()}}),e)})))).apply(this,arguments)}var f={vertex:"\n[[block]] struct Uniforms {\n  modelViewProjectionMatrix : [[stride(64)]] array<mat4x4<f32>, 16>;\n};\n\n[[binding(0), group(0)]] var<uniform> uniforms : Uniforms;\n\nstruct VertexOutput {\n  [[builtin(position)]] Position : vec4<f32>;\n  [[location(0)]] fragColor : vec4<f32>;\n};\n\n[[stage(vertex)]]\nfn main([[builtin(instance_index)]] instanceIdx : u32,\n        [[location(0)]] position : vec4<f32>,\n        [[location(1)]] color : vec4<f32>) -> VertexOutput {\n  var output : VertexOutput;\n  output.Position = uniforms.modelViewProjectionMatrix[instanceIdx] * position;\n  output.fragColor = color;\n  return output;\n}\n",fragment:"\n[[stage(fragment)]]\nfn main([[location(0)]] fragColor : vec4<f32>) -> [[location(0)]] vec4<f32> {\n  return fragColor;\n}\n"};n.default=Object(c.c)({name:"Instanced Cube",description:"This example shows the use of instancing.",slug:"instancedCube",init:function(e){return u.apply(this,arguments)},source:"import { mat4, vec3 } from 'gl-matrix';\nimport {\n  cubeVertexArray,\n  cubeVertexSize,\n  cubeColorOffset,\n  cubePositionOffset,\n  cubeVertexCount,\n} from '../../meshes/cube';\nimport { makeBasicExample } from '../../components/basicExample';\n\nasync function init(canvas: HTMLCanvasElement) {\n  const adapter = await navigator.gpu.requestAdapter();\n  const device = await adapter.requestDevice();\n\n  const aspect = Math.abs(canvas.width / canvas.height);\n  const projectionMatrix = mat4.create();\n  mat4.perspective(projectionMatrix, (2 * Math.PI) / 5, aspect, 1, 100.0);\n\n  const context = canvas.getContext('gpupresent');\n\n  const swapChain = context.configureSwapChain({\n    device,\n    format: 'bgra8unorm',\n  });\n\n  const verticesBuffer = device.createBuffer({\n    size: cubeVertexArray.byteLength,\n    usage: GPUBufferUsage.VERTEX,\n    mappedAtCreation: true,\n  });\n  new Float32Array(verticesBuffer.getMappedRange()).set(cubeVertexArray);\n  verticesBuffer.unmap();\n\n  const pipeline = device.createRenderPipeline({\n    vertex: {\n      module: device.createShaderModule({\n        code: wgslShaders.vertex,\n      }),\n      entryPoint: 'main',\n      buffers: [\n        {\n          arrayStride: cubeVertexSize,\n          stepMode: 'vertex',\n          attributes: [\n            {\n              // position\n              shaderLocation: 0,\n              offset: cubePositionOffset,\n              format: 'float32x4',\n            },\n            {\n              // color\n              shaderLocation: 1,\n              offset: cubeColorOffset,\n              format: 'float32x4',\n            },\n          ],\n        },\n      ],\n    },\n    fragment: {\n      module: device.createShaderModule({\n        code: wgslShaders.fragment,\n      }),\n      entryPoint: 'main',\n      targets: [\n        {\n          format: 'bgra8unorm',\n        },\n      ],\n    },\n    primitive: {\n      topology: 'triangle-list',\n      cullMode: 'back',\n    },\n    depthStencil: {\n      depthWriteEnabled: true,\n      depthCompare: 'less',\n      format: 'depth24plus-stencil8',\n    },\n  });\n\n  const depthTexture = device.createTexture({\n    size: {\n      width: canvas.width,\n      height: canvas.height,\n    },\n    format: 'depth24plus-stencil8',\n    usage: GPUTextureUsage.RENDER_ATTACHMENT,\n  });\n\n  const renderPassDescriptor: GPURenderPassDescriptor = {\n    colorAttachments: [\n      {\n        // view is acquired in render loop.\n        view: undefined,\n\n        loadValue: { r: 0.5, g: 0.5, b: 0.5, a: 1.0 },\n        storeOp: 'store',\n      },\n    ],\n    depthStencilAttachment: {\n      view: depthTexture.createView(),\n\n      depthLoadValue: 1.0,\n      depthStoreOp: 'store',\n      stencilLoadValue: 0,\n      stencilStoreOp: 'store',\n    },\n  };\n\n  const xCount = 4;\n  const yCount = 4;\n  const numInstances = xCount * yCount;\n  const matrixFloatCount = 16; // 4x4 matrix\n  const matrixSize = 4 * matrixFloatCount;\n  const uniformBufferSize = numInstances * matrixSize;\n\n  const uniformBuffer = device.createBuffer({\n    size: uniformBufferSize,\n    usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\n  });\n\n  const uniformBindGroup = device.createBindGroup({\n    layout: pipeline.getBindGroupLayout(0),\n    entries: [\n      {\n        binding: 0,\n        resource: {\n          buffer: uniformBuffer,\n        },\n      },\n    ],\n  });\n\n  const modelMatrices = new Array(numInstances);\n  const mvpMatricesData = new Float32Array(matrixFloatCount * numInstances);\n\n  const step = 4.0;\n\n  let m = 0;\n  for (let x = 0; x < xCount; x++) {\n    for (let y = 0; y < yCount; y++) {\n      modelMatrices[m] = mat4.create();\n      mat4.translate(\n        modelMatrices[m],\n        modelMatrices[m],\n        vec3.fromValues(\n          step * (x - xCount / 2 + 0.5),\n          step * (y - yCount / 2 + 0.5),\n          0\n        )\n      );\n      m++;\n    }\n  }\n\n  const viewMatrix = mat4.create();\n  mat4.translate(viewMatrix, viewMatrix, vec3.fromValues(0, 0, -12));\n\n  const tmpMat4 = mat4.create();\n\n  function updateTransformationMatrix() {\n    const now = Date.now() / 1000;\n\n    let m = 0,\n      i = 0;\n    for (let x = 0; x < xCount; x++) {\n      for (let y = 0; y < yCount; y++) {\n        mat4.rotate(\n          tmpMat4,\n          modelMatrices[i],\n          1,\n          vec3.fromValues(\n            Math.sin((x + 0.5) * now),\n            Math.cos((y + 0.5) * now),\n            0\n          )\n        );\n\n        mat4.multiply(tmpMat4, viewMatrix, tmpMat4);\n        mat4.multiply(tmpMat4, projectionMatrix, tmpMat4);\n\n        mvpMatricesData.set(tmpMat4, m);\n\n        i++;\n        m += matrixFloatCount;\n      }\n    }\n  }\n\n  return function frame() {\n    updateTransformationMatrix();\n    device.queue.writeBuffer(\n      uniformBuffer,\n      0,\n      mvpMatricesData.buffer,\n      mvpMatricesData.byteOffset,\n      mvpMatricesData.byteLength\n    );\n\n    renderPassDescriptor.colorAttachments[0].view = swapChain\n      .getCurrentTexture()\n      .createView();\n\n    const commandEncoder = device.createCommandEncoder();\n    const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\n    passEncoder.setPipeline(pipeline);\n    passEncoder.setVertexBuffer(0, verticesBuffer);\n\n    passEncoder.setBindGroup(0, uniformBindGroup);\n    passEncoder.draw(cubeVertexCount, numInstances, 0, 0);\n\n    passEncoder.endPass();\n\n    device.queue.submit([commandEncoder.finish()]);\n  };\n}\n\nconst wgslShaders = {\n  vertex: `\n[[block]] struct Uniforms {\n  modelViewProjectionMatrix : [[stride(64)]] array<mat4x4<f32>, 16>;\n};\n\n[[binding(0), group(0)]] var<uniform> uniforms : Uniforms;\n\nstruct VertexOutput {\n  [[builtin(position)]] Position : vec4<f32>;\n  [[location(0)]] fragColor : vec4<f32>;\n};\n\n[[stage(vertex)]]\nfn main([[builtin(instance_index)]] instanceIdx : u32,\n        [[location(0)]] position : vec4<f32>,\n        [[location(1)]] color : vec4<f32>) -> VertexOutput {\n  var output : VertexOutput;\n  output.Position = uniforms.modelViewProjectionMatrix[instanceIdx] * position;\n  output.fragColor = color;\n  return output;\n}\n`,\n  fragment: `\n[[stage(fragment)]]\nfn main([[location(0)]] fragColor : vec4<f32>) -> [[location(0)]] vec4<f32> {\n  return fragColor;\n}\n`,\n};\n\nexport default makeBasicExample({\n  name: 'Instanced Cube',\n  description: 'This example shows the use of instancing.',\n  slug: 'instancedCube',\n  init,\n  source: __SOURCE__,\n});\n"})},hiT4:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/samples/instancedCube",function(){return t("8cDV")}])}},[["hiT4",0,1,4,2,3,5]]]);