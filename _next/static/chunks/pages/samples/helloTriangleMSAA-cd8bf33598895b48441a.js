_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[17],{L2KF:function(e,n,t){"use strict";t.r(n);var a=t("o0o1"),r=t.n(a),i=t("HaE+"),o=t("SoUo");function s(){return(s=Object(i.a)(r.a.mark((function e(n){var t,a,i,o,s,u,l,d,p;return r.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return p=function(){var e=a.createCommandEncoder(),n={colorAttachments:[{view:d,resolveTarget:s.getCurrentTexture().createView(),loadValue:{r:0,g:0,b:0,a:1},storeOp:"clear"}]},t=e.beginRenderPass(n);t.setPipeline(u),t.draw(3,1,0,0),t.endPass(),a.queue.submit([e.finish()])},e.next=3,navigator.gpu.requestAdapter();case 3:return t=e.sent,e.next=6,t.requestDevice();case 6:return a=e.sent,i=n.getContext("gpupresent"),o="bgra8unorm",s=i.configureSwapChain({device:a,format:o}),4,u=a.createRenderPipeline({vertex:{module:a.createShaderModule({code:c.vertex}),entryPoint:"main"},fragment:{module:a.createShaderModule({code:c.fragment}),entryPoint:"main",targets:[{format:o}]},primitive:{topology:"triangle-list"},multisample:{count:4}}),l=a.createTexture({size:{width:n.width,height:n.height},sampleCount:4,format:o,usage:GPUTextureUsage.RENDER_ATTACHMENT}),d=l.createView(),e.abrupt("return",p);case 15:case"end":return e.stop()}}),e)})))).apply(this,arguments)}var c={vertex:"\nlet pos : array<vec2<f32>, 3> = array<vec2<f32>, 3>(\n    vec2<f32>(0.0, 0.5),\n    vec2<f32>(-0.5, -0.5),\n    vec2<f32>(0.5, -0.5));\n\n[[stage(vertex)]]\nfn main([[builtin(vertex_index)]] VertexIndex : u32)\n     -> [[builtin(position)]] vec4<f32> {\n  return vec4<f32>(pos[VertexIndex], 0.0, 1.0);\n}\n",fragment:"\n[[stage(fragment)]]\nfn main() -> [[location(0)]] vec4<f32> {\n  return vec4<f32>(1.0, 0.0, 0.0, 1.0);\n}\n"};n.default=Object(o.c)({name:"Hello Triangle MSAA",description:"Shows rendering a basic triangle with multisampling.",slug:"helloTriangleMSAA",init:function(e){return s.apply(this,arguments)},source:"import { makeBasicExample } from '../../components/basicExample';\n\nasync function init(canvas: HTMLCanvasElement) {\n  const adapter = await navigator.gpu.requestAdapter();\n  const device = await adapter.requestDevice();\n\n  const context = canvas.getContext('gpupresent');\n\n  const swapChainFormat = 'bgra8unorm';\n\n  const swapChain: GPUSwapChain = context.configureSwapChain({\n    device,\n    format: swapChainFormat,\n  });\n\n  const sampleCount = 4;\n\n  const pipeline = device.createRenderPipeline({\n    vertex: {\n      module: device.createShaderModule({\n        code: wgslShaders.vertex,\n      }),\n      entryPoint: 'main',\n    },\n    fragment: {\n      module: device.createShaderModule({\n        code: wgslShaders.fragment,\n      }),\n      entryPoint: 'main',\n      targets: [\n        {\n          format: swapChainFormat,\n        },\n      ],\n    },\n    primitive: {\n      topology: 'triangle-list',\n    },\n    multisample: {\n      count: sampleCount,\n    },\n  });\n\n  const texture = device.createTexture({\n    size: {\n      width: canvas.width,\n      height: canvas.height,\n    },\n    sampleCount,\n    format: swapChainFormat,\n    usage: GPUTextureUsage.RENDER_ATTACHMENT,\n  });\n  const view = texture.createView();\n\n  function frame() {\n    const commandEncoder = device.createCommandEncoder();\n\n    const renderPassDescriptor: GPURenderPassDescriptor = {\n      colorAttachments: [\n        {\n          view,\n          resolveTarget: swapChain.getCurrentTexture().createView(),\n          loadValue: { r: 0.0, g: 0.0, b: 0.0, a: 1.0 },\n          storeOp: 'clear',\n        },\n      ],\n    };\n\n    const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\n    passEncoder.setPipeline(pipeline);\n    passEncoder.draw(3, 1, 0, 0);\n    passEncoder.endPass();\n\n    device.queue.submit([commandEncoder.finish()]);\n  }\n\n  return frame;\n}\n\nconst wgslShaders = {\n  vertex: `\nlet pos : array<vec2<f32>, 3> = array<vec2<f32>, 3>(\n    vec2<f32>(0.0, 0.5),\n    vec2<f32>(-0.5, -0.5),\n    vec2<f32>(0.5, -0.5));\n\n[[stage(vertex)]]\nfn main([[builtin(vertex_index)]] VertexIndex : u32)\n     -> [[builtin(position)]] vec4<f32> {\n  return vec4<f32>(pos[VertexIndex], 0.0, 1.0);\n}\n`,\n  fragment: `\n[[stage(fragment)]]\nfn main() -> [[location(0)]] vec4<f32> {\n  return vec4<f32>(1.0, 0.0, 0.0, 1.0);\n}\n`,\n};\n\nexport default makeBasicExample({\n  name: 'Hello Triangle MSAA',\n  description: 'Shows rendering a basic triangle with multisampling.',\n  slug: 'helloTriangleMSAA',\n  init,\n  source: __SOURCE__,\n});\n"})},gOJD:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/samples/helloTriangleMSAA",function(){return t("L2KF")}])}},[["gOJD",0,1,4,2,3,5]]]);