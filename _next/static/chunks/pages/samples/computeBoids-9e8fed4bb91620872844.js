_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[13],{"5IKv":function(e,n,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/samples/computeBoids",function(){return a("SR1g")}])},SR1g:function(e,n,a){"use strict";a.r(n);var t=a("o0o1"),r=a.n(t),s=a("HaE+"),i=a("SoUo");function c(){return(c=Object(s.a)(r.a.mark((function e(n){var a,t,s,i,c,l,u,p,f,d,v,m,g,P,h,b,x,y,V,w;return r.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return a=1500,e.next=3,navigator.gpu.requestAdapter();case 3:return t=e.sent,e.next=6,t.requestDevice();case 6:for(s=e.sent,i=n.getContext("gpupresent"),c=i.configureSwapChain({device:s,format:"bgra8unorm"}),l=s.createRenderPipeline({vertex:{module:s.createShaderModule({code:o.vertex}),entryPoint:"main",buffers:[{arrayStride:16,stepMode:"instance",attributes:[{shaderLocation:0,offset:0,format:"float32x2"},{shaderLocation:1,offset:8,format:"float32x2"}]},{arrayStride:8,stepMode:"vertex",attributes:[{shaderLocation:2,offset:0,format:"float32x2"}]}]},fragment:{module:s.createShaderModule({code:o.fragment}),entryPoint:"main",targets:[{format:"bgra8unorm"}]},primitive:{topology:"triangle-list"},depthStencil:{depthWriteEnabled:!0,depthCompare:"less",format:"depth24plus-stencil8"}}),u=s.createComputePipeline({compute:{module:s.createShaderModule({code:o.compute(a)}),entryPoint:"main"}}),p=s.createTexture({size:{width:n.width,height:n.height},format:"depth24plus-stencil8",usage:GPUTextureUsage.RENDER_ATTACHMENT}),f={colorAttachments:[{view:void 0,loadValue:{r:0,g:0,b:0,a:1},storeOp:"store"}],depthStencilAttachment:{view:p.createView(),depthLoadValue:1,depthStoreOp:"store",stencilLoadValue:0,stencilStoreOp:"store"}},d=new Float32Array([-.01,-.02,.01,-.02,0,.02]),v=s.createBuffer({size:d.byteLength,usage:GPUBufferUsage.VERTEX,mappedAtCreation:!0}),new Float32Array(v.getMappedRange()).set(d),v.unmap(),m=new Float32Array([.04,.1,.025,.025,.02,.05,.005]),g=s.createBuffer({size:m.byteLength,usage:GPUBufferUsage.UNIFORM,mappedAtCreation:!0}),new Float32Array(g.getMappedRange()).set(m),g.unmap(),P=new Float32Array(4*a),h=0;h<a;++h)P[4*h+0]=2*(Math.random()-.5),P[4*h+1]=2*(Math.random()-.5),P[4*h+2]=2*(Math.random()-.5)*.1,P[4*h+3]=2*(Math.random()-.5)*.1;for(b=new Array(2),x=new Array(2),y=0;y<2;++y)b[y]=s.createBuffer({size:P.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.STORAGE,mappedAtCreation:!0}),new Float32Array(b[y].getMappedRange()).set(P),b[y].unmap();for(V=0;V<2;++V)x[V]=s.createBindGroup({layout:u.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:g,offset:0,size:m.byteLength}},{binding:1,resource:{buffer:b[V],offset:0,size:P.byteLength}},{binding:2,resource:{buffer:b[(V+1)%2],offset:0,size:P.byteLength}}]});return w=0,e.abrupt("return",(function(){f.colorAttachments[0].view=c.getCurrentTexture().createView();var e=s.createCommandEncoder(),n=e.beginComputePass();n.setPipeline(u),n.setBindGroup(0,x[w%2]),n.dispatch(a),n.endPass();var t=e.beginRenderPass(f);t.setPipeline(l),t.setVertexBuffer(0,b[(w+1)%2]),t.setVertexBuffer(1,v),t.draw(3,a,0,0),t.endPass(),s.queue.submit([e.finish()]),++w}));case 29:case"end":return e.stop()}}),e)})))).apply(this,arguments)}var o={vertex:"\n[[stage(vertex)]]\nfn main([[location(0)]] a_particlePos : vec2<f32>,\n        [[location(1)]] a_particleVel : vec2<f32>,\n        [[location(2)]] a_pos : vec2<f32>) -> [[builtin(position)]] vec4<f32> {\n  var angle : f32 = -atan2(a_particleVel.x, a_particleVel.y);\n  var pos : vec2<f32> = vec2<f32>(\n      (a_pos.x * cos(angle)) - (a_pos.y * sin(angle)),\n      (a_pos.x * sin(angle)) + (a_pos.y * cos(angle)));\n  return vec4<f32>(pos + a_particlePos, 0.0, 1.0);\n}\n",fragment:"\n[[stage(fragment)]]\nfn main() -> [[location(0)]] vec4<f32> {\n  return vec4<f32>(1.0, 1.0, 1.0, 1.0);\n}\n",compute:function(e){return"\n[[block]] struct Particle {\n  pos : vec2<f32>;\n  vel : vec2<f32>;\n};\n[[block]] struct SimParams {\n  deltaT : f32;\n  rule1Distance : f32;\n  rule2Distance : f32;\n  rule3Distance : f32;\n  rule1Scale : f32;\n  rule2Scale : f32;\n  rule3Scale : f32;\n};\n[[block]] struct Particles {\n  particles : [[stride(16)]] array<Particle, ".concat(e,">;\n};\n[[binding(0), group(0)]] var<uniform> params : SimParams;\n[[binding(1), group(0)]] var<storage> particlesA : [[access(read)]] Particles;\n[[binding(2), group(0)]] var<storage> particlesB : [[access(read_write)]] Particles;\n\n// https://github.com/austinEng/Project6-Vulkan-Flocking/blob/master/data/shaders/computeparticles/particle.comp\n[[stage(compute)]]\nfn main([[builtin(global_invocation_id)]] GlobalInvocationID : vec3<u32>) {\n  var index : u32 = GlobalInvocationID.x;\n  if (index >= ").concat(e,"u) {\n    return;\n  }\n  var vPos : vec2<f32> = particlesA.particles[index].pos;\n  var vVel : vec2<f32> = particlesA.particles[index].vel;\n  var cMass : vec2<f32> = vec2<f32>(0.0, 0.0);\n  var cVel : vec2<f32> = vec2<f32>(0.0, 0.0);\n  var colVel : vec2<f32> = vec2<f32>(0.0, 0.0);\n  var cMassCount : u32 = 0u;\n  var cVelCount : u32 = 0u;\n  var pos : vec2<f32>;\n  var vel : vec2<f32>;\n\n  for (var i : u32 = 0u; i < ").concat(e,"u; i = i + 1u) {\n    if (i == index) {\n      continue;\n    }\n\n    pos = particlesA.particles[i].pos.xy;\n    vel = particlesA.particles[i].vel.xy;\n    if (distance(pos, vPos) < params.rule1Distance) {\n      cMass = cMass + pos;\n      cMassCount = cMassCount + 1u;\n    }\n    if (distance(pos, vPos) < params.rule2Distance) {\n      colVel = colVel - (pos - vPos);\n    }\n    if (distance(pos, vPos) < params.rule3Distance) {\n      cVel = cVel + vel;\n      cVelCount = cVelCount + 1u;\n    }\n  }\n  if (cMassCount > 0u) {\n    var temp : f32 = f32(cMassCount);\n    cMass = (cMass / vec2<f32>(temp, temp)) - vPos;\n  }\n  if (cVelCount > 0u) {\n    var temp : f32 = f32(cVelCount);\n    cVel = cVel / vec2<f32>(temp, temp);\n  }\n  vVel = vVel + (cMass * params.rule1Scale) + (colVel * params.rule2Scale) +\n      (cVel * params.rule3Scale);\n\n  // clamp velocity for a more pleasing simulation\n  vVel = normalize(vVel) * clamp(length(vVel), 0.0, 0.1);\n  // kinematic update\n  vPos = vPos + (vVel * params.deltaT);\n  // Wrap around boundary\n  if (vPos.x < -1.0) {\n    vPos.x = 1.0;\n  }\n  if (vPos.x > 1.0) {\n    vPos.x = -1.0;\n  }\n  if (vPos.y < -1.0) {\n    vPos.y = 1.0;\n  }\n  if (vPos.y > 1.0) {\n    vPos.y = -1.0;\n  }\n  // Write back\n  particlesB.particles[index].pos = vPos;\n  particlesB.particles[index].vel = vVel;\n}\n")}};n.default=Object(i.c)({name:"Compute Boids",description:"A GPU compute particle simulation that mimics                 the flocking behavior of birds. A compute shader updates                 two ping-pong buffers which store particle data. The data                 is used to draw instanced particles.",slug:"computeBoids",init:function(e){return c.apply(this,arguments)},source:"import { makeBasicExample } from '../../components/basicExample';\n\nasync function init(canvas: HTMLCanvasElement) {\n  const numParticles = 1500;\n\n  const adapter = await navigator.gpu.requestAdapter();\n  const device = await adapter.requestDevice();\n\n  const context = canvas.getContext('gpupresent');\n\n  const swapChain = context.configureSwapChain({\n    device,\n    format: 'bgra8unorm',\n  });\n\n  const renderPipeline = device.createRenderPipeline({\n    vertex: {\n      module: device.createShaderModule({\n        code: wgslShaders.vertex,\n      }),\n      entryPoint: 'main',\n      buffers: [\n        {\n          // instanced particles buffer\n          arrayStride: 4 * 4,\n          stepMode: 'instance',\n          attributes: [\n            {\n              // instance position\n              shaderLocation: 0,\n              offset: 0,\n              format: 'float32x2',\n            },\n            {\n              // instance velocity\n              shaderLocation: 1,\n              offset: 2 * 4,\n              format: 'float32x2',\n            },\n          ],\n        },\n        {\n          // vertex buffer\n          arrayStride: 2 * 4,\n          stepMode: 'vertex',\n          attributes: [\n            {\n              // vertex positions\n              shaderLocation: 2,\n              offset: 0,\n              format: 'float32x2',\n            },\n          ],\n        },\n      ],\n    },\n    fragment: {\n      module: device.createShaderModule({\n        code: wgslShaders.fragment,\n      }),\n      entryPoint: 'main',\n      targets: [\n        {\n          format: 'bgra8unorm',\n        },\n      ],\n    },\n    primitive: {\n      topology: 'triangle-list',\n    },\n    depthStencil: {\n      depthWriteEnabled: true,\n      depthCompare: 'less',\n      format: 'depth24plus-stencil8',\n    },\n  });\n\n  const computePipeline = device.createComputePipeline({\n    compute: {\n      module: device.createShaderModule({\n        code: wgslShaders.compute(numParticles),\n      }),\n      entryPoint: 'main',\n    },\n  });\n\n  const depthTexture = device.createTexture({\n    size: { width: canvas.width, height: canvas.height },\n    format: 'depth24plus-stencil8',\n    usage: GPUTextureUsage.RENDER_ATTACHMENT,\n  });\n\n  const renderPassDescriptor: GPURenderPassDescriptor = {\n    colorAttachments: [\n      {\n        view: undefined, // Assigned later\n        loadValue: { r: 0.0, g: 0.0, b: 0.0, a: 1.0 },\n        storeOp: 'store',\n      },\n    ],\n    depthStencilAttachment: {\n      view: depthTexture.createView(),\n      depthLoadValue: 1.0,\n      depthStoreOp: 'store',\n      stencilLoadValue: 0,\n      stencilStoreOp: 'store',\n    },\n  };\n\n  const vertexBufferData = new Float32Array([\n    -0.01,\n    -0.02,\n    0.01,\n    -0.02,\n    0.0,\n    0.02,\n  ]);\n  const verticesBuffer = device.createBuffer({\n    size: vertexBufferData.byteLength,\n    usage: GPUBufferUsage.VERTEX,\n    mappedAtCreation: true,\n  });\n  new Float32Array(verticesBuffer.getMappedRange()).set(vertexBufferData);\n  verticesBuffer.unmap();\n\n  const simParamData = new Float32Array([\n    0.04, // deltaT;\n    0.1, // rule1Distance;\n    0.025, // rule2Distance;\n    0.025, // rule3Distance;\n    0.02, // rule1Scale;\n    0.05, // rule2Scale;\n    0.005, // rule3Scale;\n  ]);\n  const simParamBuffer = device.createBuffer({\n    size: simParamData.byteLength,\n    usage: GPUBufferUsage.UNIFORM,\n    mappedAtCreation: true,\n  });\n  new Float32Array(simParamBuffer.getMappedRange()).set(simParamData);\n  simParamBuffer.unmap();\n\n  const initialParticleData = new Float32Array(numParticles * 4);\n  for (let i = 0; i < numParticles; ++i) {\n    initialParticleData[4 * i + 0] = 2 * (Math.random() - 0.5);\n    initialParticleData[4 * i + 1] = 2 * (Math.random() - 0.5);\n    initialParticleData[4 * i + 2] = 2 * (Math.random() - 0.5) * 0.1;\n    initialParticleData[4 * i + 3] = 2 * (Math.random() - 0.5) * 0.1;\n  }\n\n  const particleBuffers: GPUBuffer[] = new Array(2);\n  const particleBindGroups: GPUBindGroup[] = new Array(2);\n  for (let i = 0; i < 2; ++i) {\n    particleBuffers[i] = device.createBuffer({\n      size: initialParticleData.byteLength,\n      usage: GPUBufferUsage.VERTEX | GPUBufferUsage.STORAGE,\n      mappedAtCreation: true,\n    });\n    new Float32Array(particleBuffers[i].getMappedRange()).set(\n      initialParticleData\n    );\n    particleBuffers[i].unmap();\n  }\n\n  for (let i = 0; i < 2; ++i) {\n    particleBindGroups[i] = device.createBindGroup({\n      layout: computePipeline.getBindGroupLayout(0),\n      entries: [\n        {\n          binding: 0,\n          resource: {\n            buffer: simParamBuffer,\n            offset: 0,\n            size: simParamData.byteLength,\n          },\n        },\n        {\n          binding: 1,\n          resource: {\n            buffer: particleBuffers[i],\n            offset: 0,\n            size: initialParticleData.byteLength,\n          },\n        },\n        {\n          binding: 2,\n          resource: {\n            buffer: particleBuffers[(i + 1) % 2],\n            offset: 0,\n            size: initialParticleData.byteLength,\n          },\n        },\n      ],\n    });\n  }\n\n  let t = 0;\n  return function frame() {\n    renderPassDescriptor.colorAttachments[0].view = swapChain\n      .getCurrentTexture()\n      .createView();\n\n    const commandEncoder = device.createCommandEncoder();\n    {\n      const passEncoder = commandEncoder.beginComputePass();\n      passEncoder.setPipeline(computePipeline);\n      passEncoder.setBindGroup(0, particleBindGroups[t % 2]);\n      passEncoder.dispatch(numParticles);\n      passEncoder.endPass();\n    }\n    {\n      const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\n      passEncoder.setPipeline(renderPipeline);\n      passEncoder.setVertexBuffer(0, particleBuffers[(t + 1) % 2]);\n      passEncoder.setVertexBuffer(1, verticesBuffer);\n      passEncoder.draw(3, numParticles, 0, 0);\n      passEncoder.endPass();\n    }\n    device.queue.submit([commandEncoder.finish()]);\n\n    ++t;\n  };\n}\n\nconst wgslShaders = {\n  vertex: `\n[[stage(vertex)]]\nfn main([[location(0)]] a_particlePos : vec2<f32>,\n        [[location(1)]] a_particleVel : vec2<f32>,\n        [[location(2)]] a_pos : vec2<f32>) -> [[builtin(position)]] vec4<f32> {\n  var angle : f32 = -atan2(a_particleVel.x, a_particleVel.y);\n  var pos : vec2<f32> = vec2<f32>(\n      (a_pos.x * cos(angle)) - (a_pos.y * sin(angle)),\n      (a_pos.x * sin(angle)) + (a_pos.y * cos(angle)));\n  return vec4<f32>(pos + a_particlePos, 0.0, 1.0);\n}\n`,\n\n  fragment: `\n[[stage(fragment)]]\nfn main() -> [[location(0)]] vec4<f32> {\n  return vec4<f32>(1.0, 1.0, 1.0, 1.0);\n}\n`,\n\n  compute: (numParticles: number) => `\n[[block]] struct Particle {\n  pos : vec2<f32>;\n  vel : vec2<f32>;\n};\n[[block]] struct SimParams {\n  deltaT : f32;\n  rule1Distance : f32;\n  rule2Distance : f32;\n  rule3Distance : f32;\n  rule1Scale : f32;\n  rule2Scale : f32;\n  rule3Scale : f32;\n};\n[[block]] struct Particles {\n  particles : [[stride(16)]] array<Particle, ${numParticles}>;\n};\n[[binding(0), group(0)]] var<uniform> params : SimParams;\n[[binding(1), group(0)]] var<storage> particlesA : [[access(read)]] Particles;\n[[binding(2), group(0)]] var<storage> particlesB : [[access(read_write)]] Particles;\n\n// https://github.com/austinEng/Project6-Vulkan-Flocking/blob/master/data/shaders/computeparticles/particle.comp\n[[stage(compute)]]\nfn main([[builtin(global_invocation_id)]] GlobalInvocationID : vec3<u32>) {\n  var index : u32 = GlobalInvocationID.x;\n  if (index >= ${numParticles}u) {\n    return;\n  }\n  var vPos : vec2<f32> = particlesA.particles[index].pos;\n  var vVel : vec2<f32> = particlesA.particles[index].vel;\n  var cMass : vec2<f32> = vec2<f32>(0.0, 0.0);\n  var cVel : vec2<f32> = vec2<f32>(0.0, 0.0);\n  var colVel : vec2<f32> = vec2<f32>(0.0, 0.0);\n  var cMassCount : u32 = 0u;\n  var cVelCount : u32 = 0u;\n  var pos : vec2<f32>;\n  var vel : vec2<f32>;\n\n  for (var i : u32 = 0u; i < ${numParticles}u; i = i + 1u) {\n    if (i == index) {\n      continue;\n    }\n\n    pos = particlesA.particles[i].pos.xy;\n    vel = particlesA.particles[i].vel.xy;\n    if (distance(pos, vPos) < params.rule1Distance) {\n      cMass = cMass + pos;\n      cMassCount = cMassCount + 1u;\n    }\n    if (distance(pos, vPos) < params.rule2Distance) {\n      colVel = colVel - (pos - vPos);\n    }\n    if (distance(pos, vPos) < params.rule3Distance) {\n      cVel = cVel + vel;\n      cVelCount = cVelCount + 1u;\n    }\n  }\n  if (cMassCount > 0u) {\n    var temp : f32 = f32(cMassCount);\n    cMass = (cMass / vec2<f32>(temp, temp)) - vPos;\n  }\n  if (cVelCount > 0u) {\n    var temp : f32 = f32(cVelCount);\n    cVel = cVel / vec2<f32>(temp, temp);\n  }\n  vVel = vVel + (cMass * params.rule1Scale) + (colVel * params.rule2Scale) +\n      (cVel * params.rule3Scale);\n\n  // clamp velocity for a more pleasing simulation\n  vVel = normalize(vVel) * clamp(length(vVel), 0.0, 0.1);\n  // kinematic update\n  vPos = vPos + (vVel * params.deltaT);\n  // Wrap around boundary\n  if (vPos.x < -1.0) {\n    vPos.x = 1.0;\n  }\n  if (vPos.x > 1.0) {\n    vPos.x = -1.0;\n  }\n  if (vPos.y < -1.0) {\n    vPos.y = 1.0;\n  }\n  if (vPos.y > 1.0) {\n    vPos.y = -1.0;\n  }\n  // Write back\n  particlesB.particles[index].pos = vPos;\n  particlesB.particles[index].vel = vVel;\n}\n`,\n};\n\nexport default makeBasicExample({\n  name: 'Compute Boids',\n  description:\n    'A GPU compute particle simulation that mimics \\\n                the flocking behavior of birds. A compute shader updates \\\n                two ping-pong buffers which store particle data. The data \\\n                is used to draw instanced particles.',\n  slug: 'computeBoids',\n  init,\n  source: __SOURCE__,\n});\n"})}},[["5IKv",0,1,4,2,3]]]);