_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[13],{"5uvS":function(n,e,r){(window.__NEXT_P=window.__NEXT_P||[]).push(["/samples/animometer",function(){return r("TRwa")}])},TRwa:function(n,e,r){"use strict";r.r(e);var t=r("o0o1"),a=r.n(t),i=r("rePB"),o=r("HaE+"),s=r("SoUo");function f(n,e){var r=Object.keys(n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);e&&(t=t.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),r.push.apply(r,t)}return r}function u(n){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?f(Object(r),!0).forEach((function(e){Object(i.a)(n,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(r)):f(Object(r)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(r,e))}))}return n}function c(){return(c=Object(o.a)(a.a.mark((function n(e,r){var t,i,o,s,f,c,m,l,p,g,y,E,v,T,B,b,P,h,w,x,_,S,A,O,G,L;return a.a.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return x=function(){for(var n=s.numTriangles,e=5*Float32Array.BYTES_PER_ELEMENT,r=256*Math.ceil(e/256),t=r/Float32Array.BYTES_PER_ELEMENT,a=c.createBuffer({size:n*r+Float32Array.BYTES_PER_ELEMENT,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM}),i=new Float32Array(n*t),o=new Array(n),f=0;f<n;++f)i[t*f+0]=.2*Math.random()+.2,i[t*f+1]=1.8*(Math.random()-.5),i[t*f+2]=1.8*(Math.random()-.5),i[t*f+3]=1.5*Math.random()+.5,i[t*f+4]=10*Math.random(),o[f]=c.createBindGroup({layout:y,entries:[{binding:0,resource:{buffer:a,offset:f*r,size:6*Float32Array.BYTES_PER_ELEMENT}}]});for(var u=c.createBindGroup({layout:E,entries:[{binding:0,resource:{buffer:a,offset:0,size:6*Float32Array.BYTES_PER_ELEMENT}}]}),d=n*r,m=c.createBindGroup({layout:g,entries:[{binding:0,resource:{buffer:a,offset:d,size:Float32Array.BYTES_PER_ELEMENT}}]}),v=14680064/Float32Array.BYTES_PER_ELEMENT,T=0;T<i.length;T+=v){var B=Math.min(i.length-T,v);c.queue.writeBuffer(a,T*Float32Array.BYTES_PER_ELEMENT,i.buffer,i.byteOffset+T*Float32Array.BYTES_PER_ELEMENT,B*Float32Array.BYTES_PER_ELEMENT)}function b(e){s.dynamicOffsets?e.setPipeline(h):e.setPipeline(P),e.setVertexBuffer(0,w),e.setBindGroup(0,m);for(var t=[0],a=0;a<n;++a)s.dynamicOffsets?(t[0]=a*r,e.setBindGroup(1,u,t)):e.setBindGroup(1,o[a]),e.draw(3,1,0,0)}var x=void 0,_=new Float32Array([0]),S={colorAttachments:[{view:void 0,loadValue:{r:0,g:0,b:0,a:1},storeOp:"store"}]},A=c.createRenderBundleEncoder({colorFormats:[l]});b(A);var O=A.finish();return function(n){void 0===x&&(x=n),_[0]=(n-x)/1e3,c.queue.writeBuffer(a,d,_.buffer),S.colorAttachments[0].view=p.getCurrentTexture().createView();var e=c.createCommandEncoder(),r=e.beginRenderPass(S);s.renderBundles?r.executeBundles([O]):b(r),r.endPass(),c.queue.submit([e.finish()])}},(t=document.createElement("div")).style.color="white",t.style.background="black",t.style.position="absolute",t.style.top="10px",t.style.left="10px",i=document.createElement("pre"),t.appendChild(i),e.parentNode.appendChild(t),o=new URLSearchParams(window.location.search),s={numTriangles:Number(o.get("numTriangles"))||2e4,renderBundles:Boolean(o.get("renderBundles")),dynamicOffsets:Boolean(o.get("dynamicOffsets"))},n.next=14,navigator.gpu.requestAdapter();case 14:return f=n.sent,n.next=17,f.requestDevice();case 17:return c=n.sent,m=e.getContext("gpupresent"),l="bgra8unorm",p=m.configureSwapChain({device:c,format:l,usage:GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT}),g=c.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.VERTEX,buffer:{type:"uniform",minBindingSize:4}}]}),y=c.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.VERTEX,buffer:{type:"uniform",minBindingSize:20}}]}),E=c.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.VERTEX,buffer:{type:"uniform",hasDynamicOffset:!0,minBindingSize:20}}]}),v=4*Float32Array.BYTES_PER_ELEMENT,T=c.createPipelineLayout({bindGroupLayouts:[g,y]}),B=c.createPipelineLayout({bindGroupLayouts:[g,E]}),b={vertex:{module:c.createShaderModule({code:d.vertex}),entryPoint:"main",buffers:[{arrayStride:2*v,stepMode:"vertex",attributes:[{shaderLocation:0,offset:0,format:"float32x4"},{shaderLocation:1,offset:v,format:"float32x4"}]}]},fragment:{module:c.createShaderModule({code:d.fragment}),entryPoint:"main",targets:[{format:l}]},primitive:{topology:"triangle-list",frontFace:"ccw",cullMode:"none"}},P=c.createRenderPipeline(u(u({},b),{},{layout:T})),h=c.createRenderPipeline(u(u({},b),{},{layout:B})),w=c.createBuffer({size:6*v,usage:GPUBufferUsage.VERTEX,mappedAtCreation:!0}),new Float32Array(w.getMappedRange()).set([0,.1,0,1,1,0,0,1,-.1,-.1,0,1,0,1,0,1,.1,-.1,0,1,0,0,1,1]),w.unmap(),_=x(),S=function(){_=x()},r.add(s,"numTriangles",0,2e5).step(1).onFinishChange(S),r.add(s,"renderBundles"),r.add(s,"dynamicOffsets"),A=void 0,O=void 0,G=void 0,L=!0,n.abrupt("return",(function(n){var e=0;void 0!==A&&(e=n-A),A=n;var r=performance.now();_(n);var t=performance.now()-r;void 0===G&&(G=e),void 0===O&&(O=t);var a=.2;G=.8*G+a*e,O=.8*O+a*t,L&&(i.innerHTML="Avg Javascript: ".concat(O.toFixed(2)," ms\nAvg Frame: ").concat(G.toFixed(2)," ms"),L=!1,setTimeout((function(){L=!0}),100))}));case 43:case"end":return n.stop()}}),n)})))).apply(this,arguments)}var d={vertex:"\n[[block]] struct Time {\n  value : f32;\n};\n\n[[block]] struct Uniforms {\n  scale : f32;\n  offsetX : f32;\n  offsetY : f32;\n  scalar : f32;\n  scalarOffset : f32;\n};\n\n[[binding(0), group(0)]] var<uniform> time : Time;\n[[binding(0), group(1)]] var<uniform> uniforms : Uniforms;\n\nstruct VertexOutput {\n  [[builtin(position)]] Position : vec4<f32>;\n  [[location(0)]] v_color : vec4<f32>;\n};\n\n[[stage(vertex)]]\nfn main([[location(0)]] position : vec4<f32>,\n        [[location(1)]] color : vec4<f32>) -> VertexOutput {\n    var fade : f32 = (uniforms.scalarOffset + time.value * uniforms.scalar / 10.0) % 1.0;\n    if (fade < 0.5) {\n        fade = fade * 2.0;\n    } else {\n        fade = (1.0 - fade) * 2.0;\n    }\n    var xpos : f32 = position.x * uniforms.scale;\n    var ypos : f32 = position.y * uniforms.scale;\n    var angle : f32 = 3.14159 * 2.0 * fade;\n    var xrot : f32 = xpos * cos(angle) - ypos * sin(angle);\n    var yrot : f32 = xpos * sin(angle) + ypos * cos(angle);\n    xpos = xrot + uniforms.offsetX;\n    ypos = yrot + uniforms.offsetY;\n    var output : VertexOutput;\n    output.v_color = vec4<f32>(fade, 1.0 - fade, 0.0, 1.0) + color;\n    output.Position = vec4<f32>(xpos, ypos, 0.0, 1.0);\n    return output;\n}\n",fragment:"\n[[stage(fragment)]]\nfn main([[location(0)]] v_color : vec4<f32>) -> [[location(0)]] vec4<f32> {\n  return v_color;\n}\n"};e.default=Object(s.c)({name:"Animometer",slug:"animometer",description:"A WebGPU of port of the Animometer MotionMark benchmark.",gui:!0,init:function(n,e){return c.apply(this,arguments)},source:"import type { GUI } from 'dat.gui';\nimport { makeBasicExample } from '../../components/basicExample';\n\nasync function init(canvas: HTMLCanvasElement, gui: GUI) {\n  const perfDisplayContainer = document.createElement('div');\n  perfDisplayContainer.style.color = 'white';\n  perfDisplayContainer.style.background = 'black';\n  perfDisplayContainer.style.position = 'absolute';\n  perfDisplayContainer.style.top = '10px';\n  perfDisplayContainer.style.left = '10px';\n\n  const perfDisplay = document.createElement('pre');\n  perfDisplayContainer.appendChild(perfDisplay);\n  canvas.parentNode.appendChild(perfDisplayContainer);\n\n  const params = new URLSearchParams(window.location.search);\n  const settings = {\n    numTriangles: Number(params.get('numTriangles')) || 20000,\n    renderBundles: Boolean(params.get('renderBundles')),\n    dynamicOffsets: Boolean(params.get('dynamicOffsets')),\n  };\n\n  const adapter = await navigator.gpu.requestAdapter();\n  const device = await adapter.requestDevice();\n\n  const context = canvas.getContext('gpupresent');\n\n  const swapChainFormat = 'bgra8unorm';\n\n  const swapChain = context.configureSwapChain({\n    device,\n    format: swapChainFormat,\n    usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT,\n  });\n\n  const timeBindGroupLayout = device.createBindGroupLayout({\n    entries: [\n      {\n        binding: 0,\n        visibility: GPUShaderStage.VERTEX,\n        buffer: {\n          type: 'uniform',\n          minBindingSize: 4,\n        },\n      },\n    ],\n  });\n\n  const bindGroupLayout = device.createBindGroupLayout({\n    entries: [\n      {\n        binding: 0,\n        visibility: GPUShaderStage.VERTEX,\n        buffer: {\n          type: 'uniform',\n          minBindingSize: 20,\n        },\n      },\n    ],\n  });\n\n  const dynamicBindGroupLayout = device.createBindGroupLayout({\n    entries: [\n      {\n        binding: 0,\n        visibility: GPUShaderStage.VERTEX,\n        buffer: {\n          type: 'uniform',\n          hasDynamicOffset: true,\n          minBindingSize: 20,\n        },\n      },\n    ],\n  });\n\n  const vec4Size = 4 * Float32Array.BYTES_PER_ELEMENT;\n  const pipelineLayout = device.createPipelineLayout({\n    bindGroupLayouts: [timeBindGroupLayout, bindGroupLayout],\n  });\n  const dynamicPipelineLayout = device.createPipelineLayout({\n    bindGroupLayouts: [timeBindGroupLayout, dynamicBindGroupLayout],\n  });\n  const pipelineDesc: GPURenderPipelineDescriptor = {\n    vertex: {\n      module: device.createShaderModule({\n        code: wgslShaders.vertex,\n      }),\n      entryPoint: 'main',\n      buffers: [\n        {\n          // vertex buffer\n          arrayStride: 2 * vec4Size,\n          stepMode: 'vertex',\n          attributes: [\n            {\n              // vertex positions\n              shaderLocation: 0,\n              offset: 0,\n              format: 'float32x4',\n            },\n            {\n              // vertex colors\n              shaderLocation: 1,\n              offset: vec4Size,\n              format: 'float32x4',\n            },\n          ],\n        },\n      ],\n    },\n    fragment: {\n      module: device.createShaderModule({\n        code: wgslShaders.fragment,\n      }),\n      entryPoint: 'main',\n      targets: [\n        {\n          format: swapChainFormat,\n        },\n      ],\n    },\n    primitive: {\n      topology: 'triangle-list',\n      frontFace: 'ccw',\n      cullMode: 'none',\n    },\n  };\n\n  const pipeline = device.createRenderPipeline({\n    ...pipelineDesc,\n    layout: pipelineLayout,\n  });\n\n  const dynamicPipeline = device.createRenderPipeline({\n    ...pipelineDesc,\n    layout: dynamicPipelineLayout,\n  });\n\n  const vertexBuffer = device.createBuffer({\n    size: 2 * 3 * vec4Size,\n    usage: GPUBufferUsage.VERTEX,\n    mappedAtCreation: true,\n  });\n\n  // prettier-ignore\n  new Float32Array(vertexBuffer.getMappedRange()).set([\n    // position data  /**/ color data\n    0, 0.1, 0, 1,     /**/ 1, 0, 0, 1,\n    -0.1, -0.1, 0, 1, /**/ 0, 1, 0, 1,\n    0.1, -0.1, 0, 1,  /**/ 0, 0, 1, 1,\n  ]);\n  vertexBuffer.unmap();\n\n  function configure() {\n    const numTriangles = settings.numTriangles;\n    const uniformBytes = 5 * Float32Array.BYTES_PER_ELEMENT;\n    const alignedUniformBytes = Math.ceil(uniformBytes / 256) * 256;\n    const alignedUniformFloats =\n      alignedUniformBytes / Float32Array.BYTES_PER_ELEMENT;\n    const uniformBuffer = device.createBuffer({\n      size: numTriangles * alignedUniformBytes + Float32Array.BYTES_PER_ELEMENT,\n      usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.UNIFORM,\n    });\n    const uniformBufferData = new Float32Array(\n      numTriangles * alignedUniformFloats\n    );\n    const bindGroups = new Array(numTriangles);\n    for (let i = 0; i < numTriangles; ++i) {\n      uniformBufferData[alignedUniformFloats * i + 0] =\n        Math.random() * 0.2 + 0.2; // scale\n      uniformBufferData[alignedUniformFloats * i + 1] =\n        0.9 * 2 * (Math.random() - 0.5); // offsetX\n      uniformBufferData[alignedUniformFloats * i + 2] =\n        0.9 * 2 * (Math.random() - 0.5); // offsetY\n      uniformBufferData[alignedUniformFloats * i + 3] =\n        Math.random() * 1.5 + 0.5; // scalar\n      uniformBufferData[alignedUniformFloats * i + 4] = Math.random() * 10; // scalarOffset\n\n      bindGroups[i] = device.createBindGroup({\n        layout: bindGroupLayout,\n        entries: [\n          {\n            binding: 0,\n            resource: {\n              buffer: uniformBuffer,\n              offset: i * alignedUniformBytes,\n              size: 6 * Float32Array.BYTES_PER_ELEMENT,\n            },\n          },\n        ],\n      });\n    }\n\n    const dynamicBindGroup = device.createBindGroup({\n      layout: dynamicBindGroupLayout,\n      entries: [\n        {\n          binding: 0,\n          resource: {\n            buffer: uniformBuffer,\n            offset: 0,\n            size: 6 * Float32Array.BYTES_PER_ELEMENT,\n          },\n        },\n      ],\n    });\n\n    const timeOffset = numTriangles * alignedUniformBytes;\n    const timeBindGroup = device.createBindGroup({\n      layout: timeBindGroupLayout,\n      entries: [\n        {\n          binding: 0,\n          resource: {\n            buffer: uniformBuffer,\n            offset: timeOffset,\n            size: Float32Array.BYTES_PER_ELEMENT,\n          },\n        },\n      ],\n    });\n\n    // writeBuffer too large may OOM. TODO: The browser should internally chunk uploads.\n    const maxMappingLength =\n      (14 * 1024 * 1024) / Float32Array.BYTES_PER_ELEMENT;\n    for (\n      let offset = 0;\n      offset < uniformBufferData.length;\n      offset += maxMappingLength\n    ) {\n      const uploadCount = Math.min(\n        uniformBufferData.length - offset,\n        maxMappingLength\n      );\n\n      device.queue.writeBuffer(\n        uniformBuffer,\n        offset * Float32Array.BYTES_PER_ELEMENT,\n        uniformBufferData.buffer,\n        uniformBufferData.byteOffset + offset * Float32Array.BYTES_PER_ELEMENT,\n        uploadCount * Float32Array.BYTES_PER_ELEMENT\n      );\n    }\n\n    function recordRenderPass(\n      passEncoder: GPURenderBundleEncoder | GPURenderPassEncoder\n    ) {\n      if (settings.dynamicOffsets) {\n        passEncoder.setPipeline(dynamicPipeline);\n      } else {\n        passEncoder.setPipeline(pipeline);\n      }\n      passEncoder.setVertexBuffer(0, vertexBuffer);\n      passEncoder.setBindGroup(0, timeBindGroup);\n      const dynamicOffsets = [0];\n      for (let i = 0; i < numTriangles; ++i) {\n        if (settings.dynamicOffsets) {\n          dynamicOffsets[0] = i * alignedUniformBytes;\n          passEncoder.setBindGroup(1, dynamicBindGroup, dynamicOffsets);\n        } else {\n          passEncoder.setBindGroup(1, bindGroups[i]);\n        }\n        passEncoder.draw(3, 1, 0, 0);\n      }\n    }\n\n    let startTime = undefined;\n    const uniformTime = new Float32Array([0]);\n\n    const renderPassDescriptor: GPURenderPassDescriptor = {\n      colorAttachments: [\n        {\n          view: undefined, // Assigned later\n          loadValue: { r: 0.0, g: 0.0, b: 0.0, a: 1.0 },\n          storeOp: 'store',\n        },\n      ],\n    };\n\n    const renderBundleEncoder = device.createRenderBundleEncoder({\n      colorFormats: [swapChainFormat],\n    });\n    recordRenderPass(renderBundleEncoder);\n    const renderBundle = renderBundleEncoder.finish();\n\n    return function doDraw(timestamp) {\n      if (startTime === undefined) {\n        startTime = timestamp;\n      }\n      uniformTime[0] = (timestamp - startTime) / 1000;\n      device.queue.writeBuffer(uniformBuffer, timeOffset, uniformTime.buffer);\n\n      renderPassDescriptor.colorAttachments[0].view = swapChain\n        .getCurrentTexture()\n        .createView();\n\n      const commandEncoder = device.createCommandEncoder();\n      const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\n\n      if (settings.renderBundles) {\n        passEncoder.executeBundles([renderBundle]);\n      } else {\n        recordRenderPass(passEncoder);\n      }\n\n      passEncoder.endPass();\n      device.queue.submit([commandEncoder.finish()]);\n    };\n  }\n\n  let doDraw = configure();\n\n  const updateSettings = () => {\n    doDraw = configure();\n  };\n  gui\n    .add(settings, 'numTriangles', 0, 200000)\n    .step(1)\n    .onFinishChange(updateSettings);\n  gui.add(settings, 'renderBundles');\n  gui.add(settings, 'dynamicOffsets');\n\n  let previousFrameTimestamp = undefined;\n  let jsTimeAvg = undefined;\n  let frameTimeAvg = undefined;\n  let updateDisplay = true;\n\n  return function frame(timestamp) {\n    let frameTime = 0;\n    if (previousFrameTimestamp !== undefined) {\n      frameTime = timestamp - previousFrameTimestamp;\n    }\n    previousFrameTimestamp = timestamp;\n\n    const start = performance.now();\n    doDraw(timestamp);\n    const jsTime = performance.now() - start;\n    if (frameTimeAvg === undefined) {\n      frameTimeAvg = frameTime;\n    }\n    if (jsTimeAvg === undefined) {\n      jsTimeAvg = jsTime;\n    }\n\n    const w = 0.2;\n    frameTimeAvg = (1 - w) * frameTimeAvg + w * frameTime;\n    jsTimeAvg = (1 - w) * jsTimeAvg + w * jsTime;\n\n    if (updateDisplay) {\n      perfDisplay.innerHTML = `Avg Javascript: ${jsTimeAvg.toFixed(\n        2\n      )} ms\\nAvg Frame: ${frameTimeAvg.toFixed(2)} ms`;\n      updateDisplay = false;\n      setTimeout(() => {\n        updateDisplay = true;\n      }, 100);\n    }\n  };\n}\n\nconst wgslShaders = {\n  vertex: `\n[[block]] struct Time {\n  value : f32;\n};\n\n[[block]] struct Uniforms {\n  scale : f32;\n  offsetX : f32;\n  offsetY : f32;\n  scalar : f32;\n  scalarOffset : f32;\n};\n\n[[binding(0), group(0)]] var<uniform> time : Time;\n[[binding(0), group(1)]] var<uniform> uniforms : Uniforms;\n\nstruct VertexOutput {\n  [[builtin(position)]] Position : vec4<f32>;\n  [[location(0)]] v_color : vec4<f32>;\n};\n\n[[stage(vertex)]]\nfn main([[location(0)]] position : vec4<f32>,\n        [[location(1)]] color : vec4<f32>) -> VertexOutput {\n    var fade : f32 = (uniforms.scalarOffset + time.value * uniforms.scalar / 10.0) % 1.0;\n    if (fade < 0.5) {\n        fade = fade * 2.0;\n    } else {\n        fade = (1.0 - fade) * 2.0;\n    }\n    var xpos : f32 = position.x * uniforms.scale;\n    var ypos : f32 = position.y * uniforms.scale;\n    var angle : f32 = 3.14159 * 2.0 * fade;\n    var xrot : f32 = xpos * cos(angle) - ypos * sin(angle);\n    var yrot : f32 = xpos * sin(angle) + ypos * cos(angle);\n    xpos = xrot + uniforms.offsetX;\n    ypos = yrot + uniforms.offsetY;\n    var output : VertexOutput;\n    output.v_color = vec4<f32>(fade, 1.0 - fade, 0.0, 1.0) + color;\n    output.Position = vec4<f32>(xpos, ypos, 0.0, 1.0);\n    return output;\n}\n`,\n\n  fragment: `\n[[stage(fragment)]]\nfn main([[location(0)]] v_color : vec4<f32>) -> [[location(0)]] vec4<f32> {\n  return v_color;\n}\n`,\n};\n\nexport default makeBasicExample({\n  name: 'Animometer',\n  slug: 'animometer',\n  description: 'A WebGPU of port of the Animometer MotionMark benchmark.',\n  gui: true,\n  init,\n  source: __SOURCE__,\n});\n"})}},[["5uvS",0,1,4,2,3,5]]]);