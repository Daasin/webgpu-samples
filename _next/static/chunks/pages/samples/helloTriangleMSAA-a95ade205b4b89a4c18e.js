_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[15],{L2KF:function(e,n,t){"use strict";t.r(n);var a=t("o0o1"),r=t.n(a),o=t("HaE+"),i=t("SoUo"),s=t("PpzT");function c(){return(c=Object(o.a)(r.a.mark((function e(n,t){var a,o,i,c,u,g,v,m,p,f;return r.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return f=function(){var e=o.createCommandEncoder(),n={colorAttachments:[{attachment:p,resolveTarget:g.getCurrentTexture().createView(),loadValue:{r:0,g:0,b:0,a:1}}]},t=e.beginRenderPass(n);t.setPipeline(v),t.draw(3,1,0,0),t.endPass(),o.defaultQueue.submit([e.finish()])},e.next=3,navigator.gpu.requestAdapter();case 3:return a=e.sent,e.next=6,a.requestDevice();case 6:return o=e.sent,e.next=9,Object(s.a)();case 9:return i=e.sent,c=n.getContext("gpupresent"),u="bgra8unorm",g=c.configureSwapChain({device:o,format:u}),4,v=o.createRenderPipeline({vertexStage:{module:t?o.createShaderModule({code:d.vertex}):o.createShaderModule({code:l.vertex,transform:function(e){return i.compileGLSL(e,"vertex")}}),entryPoint:"main"},fragmentStage:{module:t?o.createShaderModule({code:d.fragment}):o.createShaderModule({code:l.fragment,transform:function(e){return i.compileGLSL(e,"fragment")}}),entryPoint:"main"},primitiveTopology:"triangle-list",colorStates:[{format:u}],sampleCount:4}),m=o.createTexture({size:{width:n.width,height:n.height,depth:1},sampleCount:4,format:u,usage:GPUTextureUsage.OUTPUT_ATTACHMENT}),p=m.createView(),e.abrupt("return",f);case 18:case"end":return e.stop()}}),e)})))).apply(this,arguments)}var l={vertex:"#version 450\nconst vec2 pos[3] = vec2[3](vec2(0.0f, 0.5f), vec2(-0.5f, -0.5f), vec2(0.5f, -0.5f));\n\nvoid main() {\n    gl_Position = vec4(pos[gl_VertexIndex], 0.0, 1.0);\n}\n",fragment:"#version 450\n  layout(location = 0) out vec4 outColor;\n\n  void main() {\n      outColor = vec4(1.0, 0.0, 0.0, 1.0);\n  }\n"},d={vertex:"\nconst pos : array<vec2<f32>, 3> = array<vec2<f32>, 3>(\n    vec2<f32>(0.0, 0.5),\n    vec2<f32>(-0.5, -0.5),\n    vec2<f32>(0.5, -0.5));\n\n[[builtin(position)]] var<out> Position : vec4<f32>;\n[[builtin(vertex_idx)]] var<in> VertexIndex : i32;\n\n[[stage(vertex)]]\nfn main() -> void {\n  Position = vec4<f32>(pos[VertexIndex], 0.0, 1.0);\n  return;\n}\n",fragment:"\n[[location(0)]] var<out> outColor : vec4<f32>;\n\n[[stage(fragment)]]\nfn main() -> void {\n  outColor = vec4<f32>(1.0, 0.0, 0.0, 1.0);\n  return;\n}\n"};n.default=Object(i.a)({name:"Hello Triangle MSAA",description:"Shows rendering a basic triangle with multisampling.",slug:"helloTriangleMSAA",init:function(e,n){return c.apply(this,arguments)},wgslShaders:d,glslShaders:l,source:"import { makeBasicExample } from '../../components/basicExample';\nimport glslangModule from '../../glslang';\n\nasync function init(canvas: HTMLCanvasElement, useWGSL: boolean) {\n  const adapter = await navigator.gpu.requestAdapter();\n  const device = await adapter.requestDevice();\n  const glslang = await glslangModule();\n\n  const context = canvas.getContext('gpupresent');\n\n  const swapChainFormat = 'bgra8unorm';\n\n  const swapChain: GPUSwapChain = context.configureSwapChain({\n    device,\n    format: swapChainFormat,\n  });\n\n  const sampleCount = 4;\n\n  const pipeline = device.createRenderPipeline({\n    vertexStage: {\n      module: useWGSL\n        ? device.createShaderModule({\n            code: wgslShaders.vertex,\n          })\n        : device.createShaderModule({\n            code: glslShaders.vertex,\n            transform: (glsl) => glslang.compileGLSL(glsl, 'vertex'),\n          }),\n      entryPoint: 'main',\n    },\n    fragmentStage: {\n      module: useWGSL\n        ? device.createShaderModule({\n            code: wgslShaders.fragment,\n          })\n        : device.createShaderModule({\n            code: glslShaders.fragment,\n            transform: (glsl) => glslang.compileGLSL(glsl, 'fragment'),\n          }),\n      entryPoint: 'main',\n    },\n\n    primitiveTopology: 'triangle-list',\n\n    colorStates: [\n      {\n        format: swapChainFormat,\n      },\n    ],\n\n    sampleCount,\n  });\n\n  const texture = device.createTexture({\n    size: {\n      width: canvas.width,\n      height: canvas.height,\n      depth: 1,\n    },\n    sampleCount,\n    format: swapChainFormat,\n    usage: GPUTextureUsage.OUTPUT_ATTACHMENT,\n  });\n  const attachment = texture.createView();\n\n  function frame() {\n    const commandEncoder = device.createCommandEncoder();\n\n    const renderPassDescriptor: GPURenderPassDescriptor = {\n      colorAttachments: [\n        {\n          attachment: attachment,\n          resolveTarget: swapChain.getCurrentTexture().createView(),\n          loadValue: { r: 0.0, g: 0.0, b: 0.0, a: 1.0 },\n        },\n      ],\n    };\n\n    const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\n    passEncoder.setPipeline(pipeline);\n    passEncoder.draw(3, 1, 0, 0);\n    passEncoder.endPass();\n\n    device.defaultQueue.submit([commandEncoder.finish()]);\n  }\n\n  return frame;\n}\n\nconst glslShaders = {\n  vertex: `#version 450\nconst vec2 pos[3] = vec2[3](vec2(0.0f, 0.5f), vec2(-0.5f, -0.5f), vec2(0.5f, -0.5f));\n\nvoid main() {\n    gl_Position = vec4(pos[gl_VertexIndex], 0.0, 1.0);\n}\n`,\n\n  fragment: `#version 450\n  layout(location = 0) out vec4 outColor;\n\n  void main() {\n      outColor = vec4(1.0, 0.0, 0.0, 1.0);\n  }\n`,\n};\n\nconst wgslShaders = {\n  vertex: `\nconst pos : array<vec2<f32>, 3> = array<vec2<f32>, 3>(\n    vec2<f32>(0.0, 0.5),\n    vec2<f32>(-0.5, -0.5),\n    vec2<f32>(0.5, -0.5));\n\n[[builtin(position)]] var<out> Position : vec4<f32>;\n[[builtin(vertex_idx)]] var<in> VertexIndex : i32;\n\n[[stage(vertex)]]\nfn main() -> void {\n  Position = vec4<f32>(pos[VertexIndex], 0.0, 1.0);\n  return;\n}\n`,\n  fragment: `\n[[location(0)]] var<out> outColor : vec4<f32>;\n\n[[stage(fragment)]]\nfn main() -> void {\n  outColor = vec4<f32>(1.0, 0.0, 0.0, 1.0);\n  return;\n}\n`,\n};\n\nexport default makeBasicExample({\n  name: 'Hello Triangle MSAA',\n  description: 'Shows rendering a basic triangle with multisampling.',\n  slug: 'helloTriangleMSAA',\n  init,\n  wgslShaders,\n  glslShaders,\n  source: __SOURCE__,\n});\n"})},gOJD:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/samples/helloTriangleMSAA",function(){return t("L2KF")}])}},[["gOJD",0,1,4,2,3]]]);