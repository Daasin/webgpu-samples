_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[17],{BsWD:function(e,n,t){"use strict";t.d(n,"a",(function(){return i}));var r=t("a3WO");function i(e,n){if(e){if("string"===typeof e)return Object(r.a)(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Object(r.a)(e,n):void 0}}},NbQA:function(e,n,t){"use strict";t.r(n);var r=t("o0o1"),i=t.n(r),a=t("HaE+"),o=t("SoUo"),c=256,u=[4,4];function s(){return(s=Object(a.a)(i.a.mark((function e(n,r){var a,o,s,l,f,d,m,g,b,h,v,x,y,w,P,O,B,S,j,G,U,I,D,E,T,_,k,C;return i.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,navigator.gpu.requestAdapter();case 2:return a=e.sent,e.next=5,a.requestDevice();case 5:return o=e.sent,s=n.getContext("gpupresent"),l="bgra8unorm",f=new Float32Array([1,1,0,1,0,1,-1,0,1,1,-1,-1,0,0,1,1,1,0,1,0,-1,-1,0,0,1,-1,1,0,0,0]),d=o.createBuffer({size:f.byteLength,usage:GPUBufferUsage.VERTEX,mappedAtCreation:!0}),new Float32Array(d.getMappedRange()).set(f),d.unmap(),m=s.configureSwapChain({device:o,format:l}),g=o.createComputePipeline({compute:{module:o.createShaderModule({code:p.blur}),entryPoint:"main"}}),b=o.createRenderPipeline({vertex:{module:o.createShaderModule({code:p.vertex}),entryPoint:"main",buffers:[{arrayStride:20,attributes:[{shaderLocation:0,offset:0,format:"float32x3"},{shaderLocation:1,offset:12,format:"float32x2"}]}]},fragment:{module:o.createShaderModule({code:p.fragment}),entryPoint:"main",targets:[{format:l}]},primitive:{topology:"triangle-list"}}),h=o.createSampler({magFilter:"linear",minFilter:"linear"}),(v=document.createElement("img")).src=t("neuz"),e.next=20,v.decode();case 20:return e.next=22,createImageBitmap(v);case 22:return x=e.sent,y=[x.width,x.height],w=y[0],P=y[1],O=o.createTexture({size:[w,P,1],format:"rgba8unorm",usage:GPUTextureUsage.SAMPLED|GPUTextureUsage.COPY_DST}),o.queue.copyImageBitmapToTexture({imageBitmap:x},{texture:O},[x.width,x.height,1]),B=[0,1].map((function(){return o.createTexture({size:{width:w,height:P},format:"rgba8unorm",usage:GPUTextureUsage.COPY_DST|GPUTextureUsage.STORAGE|GPUTextureUsage.SAMPLED})})),S=function(){var e=o.createBuffer({size:4,mappedAtCreation:!0,usage:GPUBufferUsage.UNIFORM});return new Uint32Array(e.getMappedRange())[0]=0,e.unmap(),e}(),j=function(){var e=o.createBuffer({size:4,mappedAtCreation:!0,usage:GPUBufferUsage.UNIFORM});return new Uint32Array(e.getMappedRange())[0]=1,e.unmap(),e}(),G=o.createBuffer({size:8,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM}),U=o.createBindGroup({layout:g.getBindGroupLayout(0),entries:[{binding:0,resource:h},{binding:1,resource:{buffer:G}}]}),I=o.createBindGroup({layout:g.getBindGroupLayout(1),entries:[{binding:1,resource:O.createView()},{binding:2,resource:B[0].createView()},{binding:3,resource:{buffer:S}}]}),D=o.createBindGroup({layout:g.getBindGroupLayout(1),entries:[{binding:1,resource:B[0].createView()},{binding:2,resource:B[1].createView()},{binding:3,resource:{buffer:j}}]}),E=o.createBindGroup({layout:g.getBindGroupLayout(1),entries:[{binding:1,resource:B[1].createView()},{binding:2,resource:B[0].createView()},{binding:3,resource:{buffer:S}}]}),T=o.createBindGroup({layout:b.getBindGroupLayout(0),entries:[{binding:0,resource:h},{binding:1,resource:B[1].createView()}]}),_={filterSize:15,iterations:2},C=function(){k=c-(_.filterSize-1),o.queue.writeBuffer(G,0,new Uint32Array([_.filterSize,k]))},r.add(_,"filterSize",1,33).step(2).onChange(C),r.add(_,"iterations",1,10).step(1),C(),e.abrupt("return",(function(){var e=o.createCommandEncoder(),n=e.beginComputePass();n.setPipeline(g),n.setBindGroup(0,U),n.setBindGroup(1,I),n.dispatch(Math.ceil(w/k),Math.ceil(P/u[1])),n.setBindGroup(1,D),n.dispatch(Math.ceil(P/k),Math.ceil(w/u[1]));for(var t=0;t<_.iterations-1;++t)n.setBindGroup(1,E),n.dispatch(Math.ceil(w/k),Math.ceil(P/u[1])),n.setBindGroup(1,D),n.dispatch(Math.ceil(P/k),Math.ceil(w/u[1]));n.endPass();var r=e.beginRenderPass({colorAttachments:[{view:m.getCurrentTexture().createView(),loadValue:{r:0,g:0,b:0,a:1},storeOp:"store"}]});r.setBindGroup(0,T),r.setPipeline(b),r.setVertexBuffer(0,d),r.setBindGroup(0,T),r.draw(6,1,0,0),r.endPass(),o.queue.submit([e.finish()])}));case 41:case"end":return e.stop()}}),e)})))).apply(this,arguments)}var p={blur:"\n  [[block]] struct Params {\n    filterDim : u32;\n    blockDim : u32;\n  };\n\n  [[group(0), binding(0)]] var samp : sampler;\n  [[group(0), binding(1)]] var<uniform> params : Params;\n  [[group(1), binding(1)]] var inputTex : texture_2d<f32>;\n  [[group(1), binding(2)]] var outputTex : [[access(write)]] texture_storage_2d<rgba8unorm>;\n\n  [[block]] struct Flip {\n    value : u32;\n  };\n  [[group(1), binding(3)]] var<uniform> flip : Flip;\n\n  // This shader blurs the input texture in one direction, depending on whether\n  // |flip.value| is 0 or 1.\n  // It does so by running ".concat(c/u[0]," threads per workgroup to load ").concat(c,"\n  // texels into ").concat(u[1]," rows of shared memory. Each thread loads a\n  // ").concat(u[0]," x ").concat(u[1]," block of texels to take advantage of the texture sampling\n  // hardware.\n  // Then, each thread computes the blur result by averaging the adjacent texel values\n  // in shared memory.\n  // Because we're operating on a subset of the texture, we cannot compute all of the\n  // results since not all of the neighbors are available in shared memory.\n  // Specifically, with ").concat(c," x ").concat(c," tiles, we can only compute and write out\n  // square blocks of size ").concat(c," - (filterSize - 1). We compute the number of blocks\n  // needed and dispatch that amount.\n\n  var<workgroup> tile : array<array<vec3<f32>, ").concat(c,">, ").concat(u[1],">;\n\n  [[stage(compute), workgroup_size(").concat(c/u[0],", 1, 1)]]\n  fn main(\n    [[builtin(workgroup_id)]] WorkGroupID : vec3<u32>,\n    [[builtin(local_invocation_id)]] LocalInvocationID : vec3<u32>\n  ) {\n    let filterOffset : u32 = (params.filterDim - 1u) / 2u;\n    let dims : vec2<i32> = textureDimensions(inputTex, 0);\n\n    let baseIndex : vec2<i32> = vec2<i32>(\n      WorkGroupID.xy * vec2<u32>(params.blockDim, ").concat(u[1],"u) +\n      LocalInvocationID.xy * vec2<u32>(").concat(u[0],"u, 1u)\n    ) - vec2<i32>(i32(filterOffset), 0);\n\n    for (var r : u32 = 0u; r < ").concat(u[1],"u; r = r + 1u) {\n      for (var c : u32 = 0u; c < ").concat(u[0],"u; c = c + 1u) {\n        var loadIndex : vec2<i32> = baseIndex + vec2<i32>(i32(c), i32(r));\n        if (flip.value != 0u) {\n          loadIndex = loadIndex.yx;\n        }\n\n        tile[r][").concat(u[0],"u * LocalInvocationID.x + c] =\n          textureSampleLevel(inputTex, samp,\n            (vec2<f32>(loadIndex) + vec2<f32>(0.25, 0.25)) / vec2<f32>(dims), 0.0).rgb;\n      }\n    }\n\n    workgroupBarrier();\n\n    for (var r : u32 = 0u; r < ").concat(u[1],"u; r = r + 1u) {\n      for (var c : u32 = 0u; c < ").concat(u[0],"u; c = c + 1u) {\n        var writeIndex : vec2<i32> = baseIndex + vec2<i32>(i32(c), i32(r));\n        if (flip.value != 0u) {\n          writeIndex = writeIndex.yx;\n        }\n\n        let center : u32 = ").concat(u[0],"u * LocalInvocationID.x + c;\n        if (center >= filterOffset &&\n            center < ").concat(c,"u - filterOffset &&\n            all(writeIndex < dims)) {\n          var acc : vec3<f32> = vec3<f32>(0.0, 0.0, 0.0);\n          for (var f : u32 = 0u; f < params.filterDim; f = f + 1u) {\n            var i : u32 = center + f - filterOffset;\n            acc = acc + (1.0 / f32(params.filterDim)) * tile[r][i];\n          }\n          textureStore(outputTex, writeIndex, vec4<f32>(acc, 1.0));\n        }\n      }\n    }\n  }\n  "),vertex:"\n[[location(0)]] var<out> fragUV : vec2<f32>;\n[[builtin(position)]] var<out> Position : vec4<f32>;\n\n[[stage(vertex)]]\nfn main(\n  [[location(0)]] position : vec3<f32>,\n  [[location(1)]] uv : vec2<f32>\n) {\n  Position = vec4<f32>(position, 1.0);\n  fragUV = uv;\n}\n",fragment:"\n[[group(0), binding(0)]] var mySampler : sampler;\n[[group(0), binding(1)]] var myTexture : texture_2d<f32>;\n\n[[location(0)]] var<out> outColor : vec4<f32>;\n\n[[stage(fragment)]]\nfn main([[location(0)]] fragUV : vec2<f32>) {\n  outColor = textureSample(myTexture, mySampler, fragUV);\n}\n"};n.default=Object(o.c)({name:"Image Blur",description:"This example shows how to blur an image using a WebGPU compute shader.",slug:"imageBlur",init:function(e,n){return s.apply(this,arguments)},source:"import type { GUI } from 'dat.gui';\nimport { makeBasicExample } from '../../components/basicExample';\n\nconst tileDim = 256;\nconst batch = [4, 4];\n\nasync function init(canvas: HTMLCanvasElement, gui?: GUI) {\n  const adapter = await navigator.gpu.requestAdapter();\n  const device = await adapter.requestDevice();\n  const context = canvas.getContext('gpupresent');\n\n  const swapChainFormat = 'bgra8unorm';\n\n  // prettier-ignore\n  const rectVerts = new Float32Array([\n    1.0,  1.0, 0.0, 1.0, 0.0,\n    1.0, -1.0, 0.0, 1.0, 1.0,\n    -1.0, -1.0, 0.0, 0.0, 1.0,\n    1.0,  1.0, 0.0, 1.0, 0.0,\n    -1.0, -1.0, 0.0, 0.0, 1.0,\n    -1.0,  1.0, 0.0, 0.0, 0.0,\n  ]);\n\n  const verticesBuffer = device.createBuffer({\n    size: rectVerts.byteLength,\n    usage: GPUBufferUsage.VERTEX,\n    mappedAtCreation: true,\n  });\n  new Float32Array(verticesBuffer.getMappedRange()).set(rectVerts);\n  verticesBuffer.unmap();\n\n  const swapChain = context.configureSwapChain({\n    device,\n    format: swapChainFormat,\n  });\n\n  const blurPipeline = device.createComputePipeline({\n    compute: {\n      module: device.createShaderModule({\n        code: wgslShaders.blur,\n      }),\n      entryPoint: 'main',\n    },\n  });\n\n  const pipeline = device.createRenderPipeline({\n    vertex: {\n      module: device.createShaderModule({\n        code: wgslShaders.vertex,\n      }),\n      entryPoint: 'main',\n      buffers: [\n        {\n          arrayStride: 20,\n          attributes: [\n            {\n              // position\n              shaderLocation: 0,\n              offset: 0,\n              format: 'float32x3',\n            },\n            {\n              // uv\n              shaderLocation: 1,\n              offset: 12,\n              format: 'float32x2',\n            },\n          ],\n        },\n      ],\n    },\n    fragment: {\n      module: device.createShaderModule({\n        code: wgslShaders.fragment,\n      }),\n      entryPoint: 'main',\n      targets: [\n        {\n          format: swapChainFormat,\n        },\n      ],\n    },\n    primitive: {\n      topology: 'triangle-list',\n    },\n  });\n\n  const sampler = device.createSampler({\n    magFilter: 'linear',\n    minFilter: 'linear',\n  });\n\n  const img = document.createElement('img');\n  img.src = require('../../../assets/img/Di-3d.png');\n  await img.decode();\n  const imageBitmap = await createImageBitmap(img);\n\n  const [srcWidth, srcHeight] = [imageBitmap.width, imageBitmap.height];\n  const cubeTexture = device.createTexture({\n    size: [srcWidth, srcHeight, 1],\n    format: 'rgba8unorm',\n    usage: GPUTextureUsage.SAMPLED | GPUTextureUsage.COPY_DST,\n  });\n  device.queue.copyImageBitmapToTexture(\n    { imageBitmap },\n    { texture: cubeTexture },\n    [imageBitmap.width, imageBitmap.height, 1]\n  );\n\n  const textures = [0, 1].map(() => {\n    return device.createTexture({\n      size: {\n        width: srcWidth,\n        height: srcHeight,\n      },\n      format: 'rgba8unorm',\n      usage:\n        GPUTextureUsage.COPY_DST |\n        GPUTextureUsage.STORAGE |\n        GPUTextureUsage.SAMPLED,\n    });\n  });\n\n  const buffer0 = (() => {\n    const buffer = device.createBuffer({\n      size: 4,\n      mappedAtCreation: true,\n      usage: GPUBufferUsage.UNIFORM,\n    });\n    new Uint32Array(buffer.getMappedRange())[0] = 0;\n    buffer.unmap();\n    return buffer;\n  })();\n\n  const buffer1 = (() => {\n    const buffer = device.createBuffer({\n      size: 4,\n      mappedAtCreation: true,\n      usage: GPUBufferUsage.UNIFORM,\n    });\n    new Uint32Array(buffer.getMappedRange())[0] = 1;\n    buffer.unmap();\n    return buffer;\n  })();\n\n  const blurParamsBuffer = device.createBuffer({\n    size: 8,\n    usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.UNIFORM,\n  });\n\n  const computeConstants = device.createBindGroup({\n    layout: blurPipeline.getBindGroupLayout(0),\n    entries: [\n      {\n        binding: 0,\n        resource: sampler,\n      },\n      {\n        binding: 1,\n        resource: {\n          buffer: blurParamsBuffer,\n        },\n      },\n    ],\n  });\n\n  const computeBindGroup0 = device.createBindGroup({\n    layout: blurPipeline.getBindGroupLayout(1),\n    entries: [\n      {\n        binding: 1,\n        resource: cubeTexture.createView(),\n      },\n      {\n        binding: 2,\n        resource: textures[0].createView(),\n      },\n      {\n        binding: 3,\n        resource: {\n          buffer: buffer0,\n        },\n      },\n    ],\n  });\n\n  const computeBindGroup1 = device.createBindGroup({\n    layout: blurPipeline.getBindGroupLayout(1),\n    entries: [\n      {\n        binding: 1,\n        resource: textures[0].createView(),\n      },\n      {\n        binding: 2,\n        resource: textures[1].createView(),\n      },\n      {\n        binding: 3,\n        resource: {\n          buffer: buffer1,\n        },\n      },\n    ],\n  });\n\n  const computeBindGroup2 = device.createBindGroup({\n    layout: blurPipeline.getBindGroupLayout(1),\n    entries: [\n      {\n        binding: 1,\n        resource: textures[1].createView(),\n      },\n      {\n        binding: 2,\n        resource: textures[0].createView(),\n      },\n      {\n        binding: 3,\n        resource: {\n          buffer: buffer0,\n        },\n      },\n    ],\n  });\n\n  const uniformBindGroup = device.createBindGroup({\n    layout: pipeline.getBindGroupLayout(0),\n    entries: [\n      {\n        binding: 0,\n        resource: sampler,\n      },\n      {\n        binding: 1,\n        resource: textures[1].createView(),\n      },\n    ],\n  });\n\n  const settings = {\n    filterSize: 15,\n    iterations: 2,\n  };\n\n  let blockDim: number;\n  const updateSettings = () => {\n    blockDim = tileDim - (settings.filterSize - 1);\n    device.queue.writeBuffer(\n      blurParamsBuffer,\n      0,\n      new Uint32Array([settings.filterSize, blockDim])\n    );\n  };\n  gui.add(settings, 'filterSize', 1, 33).step(2).onChange(updateSettings);\n  gui.add(settings, 'iterations', 1, 10).step(1);\n\n  updateSettings();\n\n  return function frame() {\n    const commandEncoder = device.createCommandEncoder();\n\n    const computePass = commandEncoder.beginComputePass();\n    computePass.setPipeline(blurPipeline);\n    computePass.setBindGroup(0, computeConstants);\n\n    computePass.setBindGroup(1, computeBindGroup0);\n    computePass.dispatch(\n      Math.ceil(srcWidth / blockDim),\n      Math.ceil(srcHeight / batch[1])\n    );\n\n    computePass.setBindGroup(1, computeBindGroup1);\n    computePass.dispatch(\n      Math.ceil(srcHeight / blockDim),\n      Math.ceil(srcWidth / batch[1])\n    );\n\n    for (let i = 0; i < settings.iterations - 1; ++i) {\n      computePass.setBindGroup(1, computeBindGroup2);\n      computePass.dispatch(\n        Math.ceil(srcWidth / blockDim),\n        Math.ceil(srcHeight / batch[1])\n      );\n\n      computePass.setBindGroup(1, computeBindGroup1);\n      computePass.dispatch(\n        Math.ceil(srcHeight / blockDim),\n        Math.ceil(srcWidth / batch[1])\n      );\n    }\n\n    computePass.endPass();\n\n    const passEncoder = commandEncoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: swapChain.getCurrentTexture().createView(),\n          loadValue: { r: 0.0, g: 0.0, b: 0.0, a: 1.0 },\n          storeOp: 'store',\n        },\n      ],\n    });\n    passEncoder.setBindGroup(0, uniformBindGroup);\n    passEncoder.setPipeline(pipeline);\n    passEncoder.setVertexBuffer(0, verticesBuffer);\n    passEncoder.setBindGroup(0, uniformBindGroup);\n    passEncoder.draw(6, 1, 0, 0);\n    passEncoder.endPass();\n    device.queue.submit([commandEncoder.finish()]);\n  };\n}\n\nconst wgslShaders = {\n  // prettier-ignore\n  blur: `\n  [[block]] struct Params {\n    filterDim : u32;\n    blockDim : u32;\n  };\n\n  [[group(0), binding(0)]] var samp : sampler;\n  [[group(0), binding(1)]] var<uniform> params : Params;\n  [[group(1), binding(1)]] var inputTex : texture_2d<f32>;\n  [[group(1), binding(2)]] var outputTex : [[access(write)]] texture_storage_2d<rgba8unorm>;\n\n  [[block]] struct Flip {\n    value : u32;\n  };\n  [[group(1), binding(3)]] var<uniform> flip : Flip;\n\n  // This shader blurs the input texture in one direction, depending on whether\n  // |flip.value| is 0 or 1.\n  // It does so by running ${tileDim / batch[0]} threads per workgroup to load ${tileDim}\n  // texels into ${batch[1]} rows of shared memory. Each thread loads a\n  // ${batch[0]} x ${batch[1]} block of texels to take advantage of the texture sampling\n  // hardware.\n  // Then, each thread computes the blur result by averaging the adjacent texel values\n  // in shared memory.\n  // Because we're operating on a subset of the texture, we cannot compute all of the\n  // results since not all of the neighbors are available in shared memory.\n  // Specifically, with ${tileDim} x ${tileDim} tiles, we can only compute and write out\n  // square blocks of size ${tileDim} - (filterSize - 1). We compute the number of blocks\n  // needed and dispatch that amount.\n\n  var<workgroup> tile : array<array<vec3<f32>, ${tileDim}>, ${batch[1]}>;\n\n  [[stage(compute), workgroup_size(${tileDim / batch[0]}, 1, 1)]]\n  fn main(\n    [[builtin(workgroup_id)]] WorkGroupID : vec3<u32>,\n    [[builtin(local_invocation_id)]] LocalInvocationID : vec3<u32>\n  ) {\n    let filterOffset : u32 = (params.filterDim - 1u) / 2u;\n    let dims : vec2<i32> = textureDimensions(inputTex, 0);\n\n    let baseIndex : vec2<i32> = vec2<i32>(\n      WorkGroupID.xy * vec2<u32>(params.blockDim, ${batch[1]}u) +\n      LocalInvocationID.xy * vec2<u32>(${batch[0]}u, 1u)\n    ) - vec2<i32>(i32(filterOffset), 0);\n\n    for (var r : u32 = 0u; r < ${batch[1]}u; r = r + 1u) {\n      for (var c : u32 = 0u; c < ${batch[0]}u; c = c + 1u) {\n        var loadIndex : vec2<i32> = baseIndex + vec2<i32>(i32(c), i32(r));\n        if (flip.value != 0u) {\n          loadIndex = loadIndex.yx;\n        }\n\n        tile[r][${batch[0]}u * LocalInvocationID.x + c] =\n          textureSampleLevel(inputTex, samp,\n            (vec2<f32>(loadIndex) + vec2<f32>(0.25, 0.25)) / vec2<f32>(dims), 0.0).rgb;\n      }\n    }\n\n    workgroupBarrier();\n\n    for (var r : u32 = 0u; r < ${batch[1]}u; r = r + 1u) {\n      for (var c : u32 = 0u; c < ${batch[0]}u; c = c + 1u) {\n        var writeIndex : vec2<i32> = baseIndex + vec2<i32>(i32(c), i32(r));\n        if (flip.value != 0u) {\n          writeIndex = writeIndex.yx;\n        }\n\n        let center : u32 = ${batch[0]}u * LocalInvocationID.x + c;\n        if (center >= filterOffset &&\n            center < ${tileDim}u - filterOffset &&\n            all(writeIndex < dims)) {\n          var acc : vec3<f32> = vec3<f32>(0.0, 0.0, 0.0);\n          for (var f : u32 = 0u; f < params.filterDim; f = f + 1u) {\n            var i : u32 = center + f - filterOffset;\n            acc = acc + (1.0 / f32(params.filterDim)) * tile[r][i];\n          }\n          textureStore(outputTex, writeIndex, vec4<f32>(acc, 1.0));\n        }\n      }\n    }\n  }\n  `,\n\n  vertex: `\n[[location(0)]] var<out> fragUV : vec2<f32>;\n[[builtin(position)]] var<out> Position : vec4<f32>;\n\n[[stage(vertex)]]\nfn main(\n  [[location(0)]] position : vec3<f32>,\n  [[location(1)]] uv : vec2<f32>\n) {\n  Position = vec4<f32>(position, 1.0);\n  fragUV = uv;\n}\n`,\n\n  fragment: `\n[[group(0), binding(0)]] var mySampler : sampler;\n[[group(0), binding(1)]] var myTexture : texture_2d<f32>;\n\n[[location(0)]] var<out> outColor : vec4<f32>;\n\n[[stage(fragment)]]\nfn main([[location(0)]] fragUV : vec2<f32>) {\n  outColor = textureSample(myTexture, mySampler, fragUV);\n}\n`,\n};\n\nexport default makeBasicExample({\n  name: 'Image Blur',\n  description:\n    'This example shows how to blur an image using a WebGPU compute shader.',\n  slug: 'imageBlur',\n  init,\n  source: __SOURCE__,\n  gui: true,\n});\n",gui:!0})},O1S9:function(e,n,t){e.exports={shaderEditor:"BasicExample_shaderEditor__2wVi1",updateShaderBtn:"BasicExample_updateShaderBtn__Qgygo",canvasContainer:"BasicExample_canvasContainer__3e5KH"}},SoUo:function(e,n,t){"use strict";t.d(n,"b",(function(){return U})),t.d(n,"a",(function(){return I})),t.d(n,"c",(function(){return _}));var r=t("a3WO");var i=t("BsWD");function a(e){return function(e){if(Array.isArray(e))return Object(r.a)(e)}(e)||function(e){if("undefined"!==typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||Object(i.a)(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}var o=t("nKUr");function c(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var u=t("o0o1"),s=t.n(u),p=t("HaE+");function l(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}function f(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function d(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function m(e,n){return(m=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}function g(e){return(g="function"===typeof Symbol&&"symbol"===typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"===typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function b(e,n){return!n||"object"!==g(n)&&"function"!==typeof n?d(e):n}function h(e){return(h=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var v=t("rePB"),x=t("g4pe"),y=t.n(x),w=t("q1tI"),P=t.n(w),O=t("O1S9"),B=t.n(O);function S(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function j(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?S(Object(t),!0).forEach((function(n){Object(v.a)(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):S(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function G(e){var n=function(){if("undefined"===typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"===typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var t,r=h(e);if(n){var i=h(this).constructor;t=Reflect.construct(r,arguments,i)}else t=r.apply(this,arguments);return b(this,t)}}var U=600,I=600;t("+dQi");var D=t("VrN/"),E=t("7QzT").setShaderRegisteredCallback,T=function(e){!function(e,n){if("function"!==typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&m(e,n)}(u,e);var n,r,i,a=G(u);function u(){var e;l(this,u);for(var n=arguments.length,t=new Array(n),r=0;r<n;r++)t[r]=arguments[r];return e=a.call.apply(a,[this].concat(t)),Object(v.a)(d(e),"stopRunning",!1),Object(v.a)(d(e),"canvasRef",P.a.createRef()),e}return n=u,(r=[{key:"componentDidMount",value:function(){var e=this,n=void 0;this.props.gui&&(n=new(t("iZKT").GUI)({autoPlace:!1}),this.canvasRef.current.parentNode.appendChild(n.domElement),n.domElement.style.position="absolute",n.domElement.style.top="10px",n.domElement.style.right="10px");var r=0;E(function(){var n=Object(p.a)(s.a.mark((function n(t,i){var a;return s.a.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:a={value:t,lineNumbers:!0,lineWrapping:!0,theme:"monokai"},e.props.addShaderEditor(Object(o.jsx)("div",{className:B.a.shaderEditor,ref:function(e){if(e){var n=D(e,a);n.updatedSource=i;var t=e.firstElementChild,r=document.createElement("button");r.className=B.a.updateShaderBtn,r.innerHTML="Update shader",r.onclick=function(){return i(n.getValue())},t.prepend(r)}}},t+r++));case 2:case"end":return n.stop()}}),n)})));return function(e,t){return n.apply(this,arguments)}}()),this.canvasRef.current&&this.props.init(this.canvasRef.current,n).then((function(n){requestAnimationFrame((function t(r){e.stopRunning||(n(r),requestAnimationFrame(t))}))}))}},{key:"componentWillUnmount",value:function(){this.stopRunning=!0}},{key:"render",value:function(){var e=this.props,n=(e.gui,e.init,e.addShaderEditor,c(e,["gui","init","addShaderEditor"]));return Object(o.jsx)("canvas",j(j({},n),{},{ref:this.canvasRef}))}}])&&f(n.prototype,r),i&&f(n,i),u}(P.a.Component);function _(e){return function(){var n=Object(w.useState)("undefined"!==typeof navigator&&!!navigator.gpu),t=n[0],r=n[1],i=function(){var n=Object(p.a)(s.a.mark((function n(t,i){return s.a.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.prev=0,n.next=3,e.init(t,i);case 3:return n.abrupt("return",n.sent);case 6:n.prev=6,n.t0=n.catch(0),console.error(n.t0),r(!1);case 10:case"end":return n.stop()}}),n,null,[[0,6]])})));return function(e,t){return n.apply(this,arguments)}}(),c=Object(w.useState)([]),u=c[0],l=c[1],f=Object(w.useMemo)((function(){return Object(o.jsx)("div",{ref:function(n){var t={value:e.source,readOnly:!0,lineNumbers:!0,lineWrapping:!0,theme:"monokai",mode:"text/typescript"};D(n,t)}})}),[]);return Object(o.jsxs)("main",{children:[Object(o.jsxs)(y.a,{children:[Object(o.jsx)("style",{dangerouslySetInnerHTML:{__html:"\n            .CodeMirror {\n              height: auto !important;\n              margin: 1em 0;\n            }\n\n            .CodeMirror-scroll {\n              height: auto !important;\n              overflow: visible !important;\n            }\n          "}}),Object(o.jsx)("title",{children:"".concat(e.name," - WebGPU Samples")}),Object(o.jsx)("meta",{name:"description",content:e.description})]}),Object(o.jsxs)("div",{children:[Object(o.jsx)("h1",{children:e.name}),Object(o.jsx)("a",{target:"_blank",rel:"noreferrer",href:"https://github.com/austinEng/webgpu-samples/tree/main/src/pages/samples/".concat(e.slug,".ts"),children:"See it on Github!"}),Object(o.jsx)("p",{children:e.description}),t?null:Object(o.jsxs)(o.Fragment,{children:[Object(o.jsx)("p",{children:"Is WebGPU enabled?"}),Object(o.jsxs)("p",{children:["WebGPU or this example is not supported! Please visit"," ",Object(o.jsx)("a",{href:"//webgpu.io",children:"webgpu.io"})," to see the current implementation status."]})]})]}),Object(o.jsx)("div",{className:B.a.canvasContainer,children:t?Object(o.jsx)(T,{init:i,gui:e.gui,addShaderEditor:function(e){return l([].concat(a(u),[e]))},width:U,height:I}):Object(o.jsx)("canvas",{width:U,height:I})}),Object(o.jsxs)("div",{children:[u,f]})]})}}},a3WO:function(e,n,t){"use strict";function r(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}t.d(n,"a",(function(){return r}))},neuz:function(e,n){e.exports="/webgpu-samples/_next/static/e04932ba9c013b60ddb249577c386914.png"},tGaW:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/samples/imageBlur",function(){return t("NbQA")}])}},[["tGaW",0,1,4,2,3]]]);