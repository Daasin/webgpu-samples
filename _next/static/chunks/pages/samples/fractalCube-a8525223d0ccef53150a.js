_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[15],{"1uVF":function(e,n,t){"use strict";t.d(n,"f",(function(){return r})),t.d(n,"b",(function(){return a})),t.d(n,"a",(function(){return o})),t.d(n,"c",(function(){return i})),t.d(n,"e",(function(){return u})),t.d(n,"d",(function(){return s}));var r=40,a=0,o=16,i=32,u=36,s=new Float32Array([1,-1,1,1,1,0,1,1,1,1,-1,-1,1,1,0,0,1,1,0,1,-1,-1,-1,1,0,0,0,1,0,0,1,-1,-1,1,1,0,0,1,1,0,1,-1,1,1,1,0,1,1,1,1,-1,-1,-1,1,0,0,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,0,1,1,0,1,1,-1,-1,1,1,0,0,1,0,0,1,1,-1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,-1,-1,1,1,0,0,1,0,0,-1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,-1,1,1,1,0,1,0,0,-1,1,-1,1,0,1,0,1,1,0,-1,1,1,1,0,1,1,1,1,1,1,1,-1,1,1,1,0,1,0,0,-1,-1,1,1,0,0,1,1,1,1,-1,1,1,1,0,1,1,1,0,1,-1,1,-1,1,0,1,0,1,0,0,-1,-1,-1,1,0,0,0,1,1,0,-1,-1,1,1,0,0,1,1,1,1,-1,1,-1,1,0,1,0,1,0,0,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,0,1,1,1,0,1,-1,-1,1,1,0,0,1,1,0,0,-1,-1,1,1,0,0,1,1,0,0,1,-1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,-1,-1,1,1,0,0,1,1,1,-1,-1,-1,1,0,0,0,1,0,1,-1,1,-1,1,0,1,0,1,0,0,1,1,-1,1,1,1,0,1,1,0,1,-1,-1,1,1,0,0,1,1,1,-1,1,-1,1,0,1,0,1,0,0])},ZYMQ:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/samples/fractalCube",function(){return t("xsd4")}])},xsd4:function(e,n,t){"use strict";t.r(n);var r=t("o0o1"),a=t.n(r),o=t("HaE+"),i=t("IOcx"),u=t("1uVF"),s=t("SoUo");function c(){return(c=Object(o.a)(a.a.mark((function e(n){var t,r,o,s,c,p,d,l,m,g,x,h,v,b,w;return a.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return w=function(){var e=i.a.create();i.a.translate(e,e,i.b.fromValues(0,0,-4));var n=Date.now()/1e3;i.a.rotate(e,e,1,i.b.fromValues(Math.sin(n),Math.cos(n),0));var t=i.a.create();return i.a.multiply(t,s,e),t},e.next=3,navigator.gpu.requestAdapter();case 3:return t=e.sent,e.next=6,t.requestDevice();case 6:return r=e.sent,o=Math.abs(n.width/n.height),s=i.a.create(),i.a.perspective(s,2*Math.PI/5,o,1,100),c=n.getContext("gpupresent"),p=c.configureSwapChain({device:r,format:"bgra8unorm",usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_SRC}),d=r.createBuffer({size:u.d.byteLength,usage:GPUBufferUsage.VERTEX,mappedAtCreation:!0}),new Float32Array(d.getMappedRange()).set(u.d),d.unmap(),l=r.createRenderPipeline({vertex:{module:r.createShaderModule({code:f.vertex}),entryPoint:"main",buffers:[{arrayStride:u.f,attributes:[{shaderLocation:0,offset:u.b,format:"float32x4"},{shaderLocation:1,offset:u.a,format:"float32x4"},{shaderLocation:2,offset:u.c,format:"float32x2"}]}]},fragment:{module:r.createShaderModule({code:f.fragment}),entryPoint:"main",targets:[{format:"bgra8unorm"}]},primitive:{topology:"triangle-list",cullMode:"back"},depthStencil:{depthWriteEnabled:!0,depthCompare:"less",format:"depth24plus-stencil8"}}),m=r.createTexture({size:{width:n.width,height:n.height},format:"depth24plus-stencil8",usage:GPUTextureUsage.RENDER_ATTACHMENT}),g={colorAttachments:[{view:void 0,loadValue:{r:.5,g:.5,b:.5,a:1},storeOp:"store"}],depthStencilAttachment:{view:m.createView(),depthLoadValue:1,depthStoreOp:"store",stencilLoadValue:0,stencilStoreOp:"store"}},64,x=r.createBuffer({size:64,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),h=r.createTexture({size:{width:n.width,height:n.height},format:"bgra8unorm",usage:GPUTextureUsage.COPY_DST|GPUTextureUsage.SAMPLED}),v=r.createSampler({magFilter:"linear",minFilter:"linear"}),b=r.createBindGroup({layout:l.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:x}},{binding:1,resource:v},{binding:2,resource:h.createView()}]}),e.abrupt("return",(function(){var e=w();r.queue.writeBuffer(x,0,e.buffer,e.byteOffset,e.byteLength);var t=p.getCurrentTexture();g.colorAttachments[0].view=t.createView();var a=r.createCommandEncoder(),o=a.beginRenderPass(g);o.setPipeline(l),o.setBindGroup(0,b),o.setVertexBuffer(0,d),o.draw(u.e,1,0,0),o.endPass(),a.copyTextureToTexture({texture:t},{texture:h},{width:n.width,height:n.height}),r.queue.submit([a.finish()])}));case 24:case"end":return e.stop()}}),e)})))).apply(this,arguments)}var f={vertex:"\n[[block]] struct Uniforms {\n  modelViewProjectionMatrix : mat4x4<f32>;\n};\n[[binding(0), group(0)]] var<uniform> uniforms : Uniforms;\n\nstruct VertexInput {\n  [[location(0)]] position : vec4<f32>;\n  [[location(1)]] color : vec4<f32>;\n  [[location(2)]] uv : vec2<f32>;\n};\n\nstruct VertexOutput {\n  [[builtin(position)]] Position : vec4<f32>;\n  [[location(0)]] fragColor : vec4<f32>;\n  [[location(1)]] fragUV: vec2<f32>;\n};\n\n[[stage(vertex)]]\nfn main(input : VertexInput) -> VertexOutput {\n  var output : VertexOutput;\n  output.Position = uniforms.modelViewProjectionMatrix * input.position;\n  output.fragColor = input.color;\n  output.fragUV = input.uv;\n  return output;\n}\n",fragment:"\n[[binding(1), group(0)]] var mySampler: sampler;\n[[binding(2), group(0)]] var myTexture: texture_2d<f32>;\n\nstruct FragmentInput {\n  [[location(0)]] fragColor: vec4<f32>;\n  [[location(1)]] fragUV: vec2<f32>;\n};\n\n[[stage(fragment)]]\nfn main(input : FragmentInput) -> [[location(0)]] vec4<f32> {\n  var texColor : vec4<f32> = textureSample(myTexture, mySampler, input.fragUV * 0.8 + vec2<f32>(0.1, 0.1));\n  var f : f32;\n  if (length(texColor.rgb - vec3<f32>(0.5, 0.5, 0.5)) < 0.01) {\n    f = 1.0;\n  } else {\n    f = 0.0;\n  }\n  return (1.0 - f) * texColor + f * input.fragColor;\n}\n"};n.default=Object(s.c)({name:"Fractal Cube",description:"This example uses the previous frame's rendering result                 as the source texture for the next frame.",slug:"fractalCube",init:function(e){return c.apply(this,arguments)},source:"import { mat4, vec3 } from 'gl-matrix';\nimport {\n  cubeVertexArray,\n  cubeVertexSize,\n  cubeColorOffset,\n  cubeUVOffset,\n  cubePositionOffset,\n  cubeVertexCount,\n} from '../../meshes/cube';\nimport { makeBasicExample } from '../../components/basicExample';\n\nasync function init(canvas: HTMLCanvasElement) {\n  const adapter = await navigator.gpu.requestAdapter();\n  const device = await adapter.requestDevice();\n\n  const aspect = Math.abs(canvas.width / canvas.height);\n  const projectionMatrix = mat4.create();\n  mat4.perspective(projectionMatrix, (2 * Math.PI) / 5, aspect, 1, 100.0);\n\n  const context = canvas.getContext('gpupresent');\n\n  const swapChain = context.configureSwapChain({\n    device,\n    format: 'bgra8unorm',\n    usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n  });\n\n  const verticesBuffer = device.createBuffer({\n    size: cubeVertexArray.byteLength,\n    usage: GPUBufferUsage.VERTEX,\n    mappedAtCreation: true,\n  });\n  new Float32Array(verticesBuffer.getMappedRange()).set(cubeVertexArray);\n  verticesBuffer.unmap();\n\n  const pipeline = device.createRenderPipeline({\n    vertex: {\n      module: device.createShaderModule({\n        code: wgslShaders.vertex,\n      }),\n      entryPoint: 'main',\n      buffers: [\n        {\n          arrayStride: cubeVertexSize,\n          attributes: [\n            {\n              // position\n              shaderLocation: 0,\n              offset: cubePositionOffset,\n              format: 'float32x4',\n            },\n            {\n              // color\n              shaderLocation: 1,\n              offset: cubeColorOffset,\n              format: 'float32x4',\n            },\n            {\n              // uv\n              shaderLocation: 2,\n              offset: cubeUVOffset,\n              format: 'float32x2',\n            },\n          ],\n        },\n      ],\n    },\n    fragment: {\n      module: device.createShaderModule({\n        code: wgslShaders.fragment,\n      }),\n      entryPoint: 'main',\n      targets: [\n        {\n          format: 'bgra8unorm',\n        },\n      ],\n    },\n    primitive: {\n      topology: 'triangle-list',\n      cullMode: 'back',\n    },\n    depthStencil: {\n      depthWriteEnabled: true,\n      depthCompare: 'less',\n      format: 'depth24plus-stencil8',\n    },\n  });\n\n  const depthTexture = device.createTexture({\n    size: { width: canvas.width, height: canvas.height },\n    format: 'depth24plus-stencil8',\n    usage: GPUTextureUsage.RENDER_ATTACHMENT,\n  });\n\n  const renderPassDescriptor: GPURenderPassDescriptor = {\n    colorAttachments: [\n      {\n        view: undefined, // Attachment is set later\n        loadValue: { r: 0.5, g: 0.5, b: 0.5, a: 1.0 },\n        storeOp: 'store',\n      },\n    ],\n    depthStencilAttachment: {\n      view: depthTexture.createView(),\n\n      depthLoadValue: 1.0,\n      depthStoreOp: 'store',\n      stencilLoadValue: 0,\n      stencilStoreOp: 'store',\n    },\n  };\n\n  const uniformBufferSize = 4 * 16; // 4x4 matrix\n  const uniformBuffer = device.createBuffer({\n    size: uniformBufferSize,\n    usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\n  });\n\n  const cubeTexture = device.createTexture({\n    size: { width: canvas.width, height: canvas.height },\n    format: 'bgra8unorm',\n    usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.SAMPLED,\n  });\n\n  const sampler = device.createSampler({\n    magFilter: 'linear',\n    minFilter: 'linear',\n  });\n\n  const uniformBindGroup = device.createBindGroup({\n    layout: pipeline.getBindGroupLayout(0),\n    entries: [\n      {\n        binding: 0,\n        resource: {\n          buffer: uniformBuffer,\n        },\n      },\n      {\n        binding: 1,\n        resource: sampler,\n      },\n      {\n        binding: 2,\n        resource: cubeTexture.createView(),\n      },\n    ],\n  });\n\n  function getTransformationMatrix() {\n    const viewMatrix = mat4.create();\n    mat4.translate(viewMatrix, viewMatrix, vec3.fromValues(0, 0, -4));\n    const now = Date.now() / 1000;\n    mat4.rotate(\n      viewMatrix,\n      viewMatrix,\n      1,\n      vec3.fromValues(Math.sin(now), Math.cos(now), 0)\n    );\n\n    const modelViewProjectionMatrix = mat4.create();\n    mat4.multiply(modelViewProjectionMatrix, projectionMatrix, viewMatrix);\n\n    return modelViewProjectionMatrix as Float32Array;\n  }\n\n  return function frame() {\n    const transformationMatrix = getTransformationMatrix();\n    device.queue.writeBuffer(\n      uniformBuffer,\n      0,\n      transformationMatrix.buffer,\n      transformationMatrix.byteOffset,\n      transformationMatrix.byteLength\n    );\n\n    const swapChainTexture = swapChain.getCurrentTexture();\n    renderPassDescriptor.colorAttachments[0].view = swapChainTexture.createView();\n\n    const commandEncoder = device.createCommandEncoder();\n\n    const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\n    passEncoder.setPipeline(pipeline);\n    passEncoder.setBindGroup(0, uniformBindGroup);\n    passEncoder.setVertexBuffer(0, verticesBuffer);\n    passEncoder.draw(cubeVertexCount, 1, 0, 0);\n    passEncoder.endPass();\n\n    commandEncoder.copyTextureToTexture(\n      {\n        texture: swapChainTexture,\n      },\n      {\n        texture: cubeTexture,\n      },\n      {\n        width: canvas.width,\n        height: canvas.height,\n      }\n    );\n\n    device.queue.submit([commandEncoder.finish()]);\n  };\n}\n\nconst wgslShaders = {\n  vertex: `\n[[block]] struct Uniforms {\n  modelViewProjectionMatrix : mat4x4<f32>;\n};\n[[binding(0), group(0)]] var<uniform> uniforms : Uniforms;\n\nstruct VertexInput {\n  [[location(0)]] position : vec4<f32>;\n  [[location(1)]] color : vec4<f32>;\n  [[location(2)]] uv : vec2<f32>;\n};\n\nstruct VertexOutput {\n  [[builtin(position)]] Position : vec4<f32>;\n  [[location(0)]] fragColor : vec4<f32>;\n  [[location(1)]] fragUV: vec2<f32>;\n};\n\n[[stage(vertex)]]\nfn main(input : VertexInput) -> VertexOutput {\n  var output : VertexOutput;\n  output.Position = uniforms.modelViewProjectionMatrix * input.position;\n  output.fragColor = input.color;\n  output.fragUV = input.uv;\n  return output;\n}\n`,\n\n  fragment: `\n[[binding(1), group(0)]] var mySampler: sampler;\n[[binding(2), group(0)]] var myTexture: texture_2d<f32>;\n\nstruct FragmentInput {\n  [[location(0)]] fragColor: vec4<f32>;\n  [[location(1)]] fragUV: vec2<f32>;\n};\n\n[[stage(fragment)]]\nfn main(input : FragmentInput) -> [[location(0)]] vec4<f32> {\n  var texColor : vec4<f32> = textureSample(myTexture, mySampler, input.fragUV * 0.8 + vec2<f32>(0.1, 0.1));\n  var f : f32;\n  if (length(texColor.rgb - vec3<f32>(0.5, 0.5, 0.5)) < 0.01) {\n    f = 1.0;\n  } else {\n    f = 0.0;\n  }\n  return (1.0 - f) * texColor + f * input.fragColor;\n}\n`,\n};\n\nexport default makeBasicExample({\n  name: 'Fractal Cube',\n  description:\n    \"This example uses the previous frame's rendering result \\\n                as the source texture for the next frame.\",\n  slug: 'fractalCube',\n  init,\n  source: __SOURCE__,\n});\n"})}},[["ZYMQ",0,1,4,2,3,5,6]]]);