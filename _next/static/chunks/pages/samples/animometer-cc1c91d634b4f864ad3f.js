_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[12],{"5uvS":function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/samples/animometer",function(){return t("TRwa")}])},BsWD:function(e,n,t){"use strict";t.d(n,"a",(function(){return i}));var r=t("a3WO");function i(e,n){if(e){if("string"===typeof e)return Object(r.a)(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Object(r.a)(e,n):void 0}}},O1S9:function(e,n,t){e.exports={shaderEditor:"BasicExample_shaderEditor__2wVi1",updateShaderBtn:"BasicExample_updateShaderBtn__Qgygo",canvasContainer:"BasicExample_canvasContainer__3e5KH"}},SoUo:function(e,n,t){"use strict";t.d(n,"b",(function(){return j})),t.d(n,"a",(function(){return _})),t.d(n,"c",(function(){return M}));var r=t("a3WO");var i=t("BsWD");function o(e){return function(e){if(Array.isArray(e))return Object(r.a)(e)}(e)||function(e){if("undefined"!==typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||Object(i.a)(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}var a=t("nKUr");function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=t("o0o1"),u=t.n(c),f=t("HaE+");function d(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}function l(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function p(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function m(e,n){return(m=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}function y(e){return(y="function"===typeof Symbol&&"symbol"===typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"===typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function g(e,n){return!n||"object"!==y(n)&&"function"!==typeof n?p(e):n}function v(e){return(v=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var b=t("rePB"),E=t("g4pe"),h=t.n(E),O=t("q1tI"),B=t.n(O),T=t("O1S9"),P=t.n(T);function x(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function w(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?x(Object(t),!0).forEach((function(n){Object(b.a)(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):x(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function S(e){var n=function(){if("undefined"===typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"===typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var t,r=v(e);if(n){var i=v(this).constructor;t=Reflect.construct(r,arguments,i)}else t=r.apply(this,arguments);return g(this,t)}}var j=600,_=600;t("+dQi");var R=t("VrN/"),A=t("7QzT").setShaderRegisteredCallback,G=function(e){!function(e,n){if("function"!==typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&m(e,n)}(c,e);var n,r,i,o=S(c);function c(){var e;d(this,c);for(var n=arguments.length,t=new Array(n),r=0;r<n;r++)t[r]=arguments[r];return e=o.call.apply(o,[this].concat(t)),Object(b.a)(p(e),"stopRunning",!1),Object(b.a)(p(e),"canvasRef",B.a.createRef()),e}return n=c,(r=[{key:"componentDidMount",value:function(){var e=this,n=void 0;this.props.gui&&(n=new(t("iZKT").GUI)({autoPlace:!1}),this.canvasRef.current.parentNode.appendChild(n.domElement),n.domElement.style.position="absolute",n.domElement.style.top="10px",n.domElement.style.right="10px");var r=0;A(function(){var n=Object(f.a)(u.a.mark((function n(t,i){var o;return u.a.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:o={value:t,lineNumbers:!0,lineWrapping:!0,theme:"monokai"},e.props.addShaderEditor(Object(a.jsx)("div",{className:P.a.shaderEditor,ref:function(e){if(e){var n=R(e,o);n.updatedSource=i;var t=e.firstElementChild,r=document.createElement("button");r.className=P.a.updateShaderBtn,r.innerHTML="Update shader",r.onclick=function(){return i(n.getValue())},t.prepend(r)}}},t+r++));case 2:case"end":return n.stop()}}),n)})));return function(e,t){return n.apply(this,arguments)}}()),this.canvasRef.current&&this.props.init(this.canvasRef.current,n).then((function(n){requestAnimationFrame((function t(r){e.stopRunning||(n(r),requestAnimationFrame(t))}))}))}},{key:"componentWillUnmount",value:function(){this.stopRunning=!0}},{key:"render",value:function(){var e=this.props,n=(e.gui,e.init,e.addShaderEditor,s(e,["gui","init","addShaderEditor"]));return Object(a.jsx)("canvas",w(w({},n),{},{ref:this.canvasRef}))}}])&&l(n.prototype,r),i&&l(n,i),c}(B.a.Component);function M(e){return function(){var n=Object(O.useState)("undefined"!==typeof navigator&&!!navigator.gpu),t=n[0],r=n[1],i=function(){var n=Object(f.a)(u.a.mark((function n(t,i){return u.a.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.prev=0,n.next=3,e.init(t,i);case 3:return n.abrupt("return",n.sent);case 6:n.prev=6,n.t0=n.catch(0),console.error(n.t0),r(!1);case 10:case"end":return n.stop()}}),n,null,[[0,6]])})));return function(e,t){return n.apply(this,arguments)}}(),s=Object(O.useState)([]),c=s[0],d=s[1],l=Object(O.useMemo)((function(){return Object(a.jsx)("div",{ref:function(n){var t={value:e.source,readOnly:!0,lineNumbers:!0,lineWrapping:!0,theme:"monokai",mode:"text/typescript"};R(n,t)}})}),[]);return Object(a.jsxs)("main",{children:[Object(a.jsxs)(h.a,{children:[Object(a.jsx)("style",{dangerouslySetInnerHTML:{__html:"\n            .CodeMirror {\n              height: auto !important;\n              margin: 1em 0;\n            }\n\n            .CodeMirror-scroll {\n              height: auto !important;\n              overflow: visible !important;\n            }\n          "}}),Object(a.jsx)("title",{children:"".concat(e.name," - WebGPU Samples")}),Object(a.jsx)("meta",{name:"description",content:e.description})]}),Object(a.jsxs)("div",{children:[Object(a.jsx)("h1",{children:e.name}),Object(a.jsx)("a",{target:"_blank",rel:"noreferrer",href:"https://github.com/austinEng/webgpu-samples/tree/main/src/pages/samples/".concat(e.slug,".ts"),children:"See it on Github!"}),Object(a.jsx)("p",{children:e.description}),t?null:Object(a.jsxs)(a.Fragment,{children:[Object(a.jsx)("p",{children:"Is WebGPU enabled?"}),Object(a.jsxs)("p",{children:["WebGPU or this example is not supported! Please visit"," ",Object(a.jsx)("a",{href:"//webgpu.io",children:"webgpu.io"})," to see the current implementation status."]})]})]}),Object(a.jsx)("div",{className:P.a.canvasContainer,children:t?Object(a.jsx)(G,{init:i,gui:e.gui,addShaderEditor:function(e){return d([].concat(o(c),[e]))},width:j,height:_}):Object(a.jsx)("canvas",{width:j,height:_})}),Object(a.jsxs)("div",{children:[c,l]})]})}}},TRwa:function(e,n,t){"use strict";t.r(n);var r=t("o0o1"),i=t.n(r),o=t("rePB"),a=t("HaE+"),s=t("SoUo");function c(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function u(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?c(Object(t),!0).forEach((function(n){Object(o.a)(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function f(){return(f=Object(a.a)(i.a.mark((function e(n,t){var r,o,a,s,c,f,l,p,m,y,g,v,b,E,h,O,B,T,P,x,w,S,j,_,R,A,G;return i.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return w=function(){for(var e=s.numTriangles,n=5*Float32Array.BYTES_PER_ELEMENT,t=256*Math.ceil(n/256),r=t/Float32Array.BYTES_PER_ELEMENT,i=f.createBuffer({size:e*t+Float32Array.BYTES_PER_ELEMENT,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM}),o=new Float32Array(e*r),a=new Array(e),c=0;c<e;++c)o[r*c+0]=.2*Math.random()+.2,o[r*c+1]=1.8*(Math.random()-.5),o[r*c+2]=1.8*(Math.random()-.5),o[r*c+3]=1.5*Math.random()+.5,o[r*c+4]=10*Math.random(),a[c]=f.createBindGroup({layout:v,entries:[{binding:0,resource:{buffer:i,offset:c*t,size:6*Float32Array.BYTES_PER_ELEMENT}}]});for(var u=f.createBindGroup({layout:b,entries:[{binding:0,resource:{buffer:i,offset:0,size:6*Float32Array.BYTES_PER_ELEMENT}}]}),d=e*t,p=f.createBindGroup({layout:g,entries:[{binding:0,resource:{buffer:i,offset:d,size:Float32Array.BYTES_PER_ELEMENT}}]}),m=14680064/Float32Array.BYTES_PER_ELEMENT,E=0;E<o.length;E+=m){var h=Math.min(o.length-E,m);f.queue.writeBuffer(i,E*Float32Array.BYTES_PER_ELEMENT,o.buffer,o.byteOffset+E*Float32Array.BYTES_PER_ELEMENT,h*Float32Array.BYTES_PER_ELEMENT)}function O(n){s.dynamicOffsets?n.setPipeline(P):n.setPipeline(T),n.setVertexBuffer(0,x),n.setBindGroup(0,p);for(var r=[0],i=0;i<e;++i)s.dynamicOffsets?(r[0]=i*t,n.setBindGroup(1,u,r)):n.setBindGroup(1,a[i]),n.draw(3,1,0,0)}var B=void 0,w=new Float32Array([0]),S={colorAttachments:[{view:void 0,loadValue:{r:0,g:0,b:0,a:1},storeOp:"store"}]},j=f.createRenderBundleEncoder({colorFormats:[y]});O(j);var _=j.finish();return function(e){void 0===B&&(B=e),w[0]=(e-B)/1e3,f.queue.writeBuffer(i,d,w.buffer),S.colorAttachments[0].view=l.getCurrentTexture().createView();var n=f.createCommandEncoder(),t=n.beginRenderPass(S);s.renderBundles?t.executeBundles([_]):O(t),t.endPass(),f.queue.submit([n.finish()])}},(r=document.createElement("div")).style.color="white",r.style.background="black",r.style.position="absolute",r.style.top="10px",r.style.left="10px",o=document.createElement("pre"),r.appendChild(o),n.parentNode.appendChild(r),a=new URLSearchParams(window.location.search),s={numTriangles:Number(a.get("numTriangles"))||2e4,renderBundles:Boolean(a.get("renderBundles")),dynamicOffsets:Boolean(a.get("dynamicOffsets"))},e.next=14,navigator.gpu.requestAdapter();case 14:return c=e.sent,e.next=17,c.requestDevice();case 17:return f=e.sent,l=n.getContext("gpupresent"),p=window.devicePixelRatio||1,m=[n.clientWidth*p,n.clientHeight*p],y=l.getPreferredFormat(c),l.configure({device:f,format:y,usage:GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT,size:m}),g=f.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.VERTEX,buffer:{type:"uniform",minBindingSize:4}}]}),v=f.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.VERTEX,buffer:{type:"uniform",minBindingSize:20}}]}),b=f.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.VERTEX,buffer:{type:"uniform",hasDynamicOffset:!0,minBindingSize:20}}]}),E=4*Float32Array.BYTES_PER_ELEMENT,h=f.createPipelineLayout({bindGroupLayouts:[g,v]}),O=f.createPipelineLayout({bindGroupLayouts:[g,b]}),B={vertex:{module:f.createShaderModule({code:d.vertex}),entryPoint:"main",buffers:[{arrayStride:2*E,stepMode:"vertex",attributes:[{shaderLocation:0,offset:0,format:"float32x4"},{shaderLocation:1,offset:E,format:"float32x4"}]}]},fragment:{module:f.createShaderModule({code:d.fragment}),entryPoint:"main",targets:[{format:y}]},primitive:{topology:"triangle-list",frontFace:"ccw",cullMode:"none"}},T=f.createRenderPipeline(u(u({},B),{},{layout:h})),P=f.createRenderPipeline(u(u({},B),{},{layout:O})),x=f.createBuffer({size:6*E,usage:GPUBufferUsage.VERTEX,mappedAtCreation:!0}),new Float32Array(x.getMappedRange()).set([0,.1,0,1,1,0,0,1,-.1,-.1,0,1,0,1,0,1,.1,-.1,0,1,0,0,1,1]),x.unmap(),S=w(),j=function(){S=w()},t.add(s,"numTriangles",0,2e5).step(1).onFinishChange(j),t.add(s,"renderBundles"),t.add(s,"dynamicOffsets"),_=void 0,R=void 0,A=void 0,G=!0,e.abrupt("return",(function(e){var n=0;void 0!==_&&(n=e-_),_=e;var t=performance.now();S(e);var r=performance.now()-t;void 0===A&&(A=n),void 0===R&&(R=r);var i=.2;A=.8*A+i*n,R=.8*R+i*r,G&&(o.innerHTML="Avg Javascript: ".concat(R.toFixed(2)," ms\nAvg Frame: ").concat(A.toFixed(2)," ms"),G=!1,setTimeout((function(){G=!0}),100))}));case 45:case"end":return e.stop()}}),e)})))).apply(this,arguments)}var d={vertex:"\n[[block]] struct Time {\n  value : f32;\n};\n\n[[block]] struct Uniforms {\n  scale : f32;\n  offsetX : f32;\n  offsetY : f32;\n  scalar : f32;\n  scalarOffset : f32;\n};\n\n[[binding(0), group(0)]] var<uniform> time : Time;\n[[binding(0), group(1)]] var<uniform> uniforms : Uniforms;\n\nstruct VertexOutput {\n  [[builtin(position)]] Position : vec4<f32>;\n  [[location(0)]] v_color : vec4<f32>;\n};\n\n[[stage(vertex)]]\nfn main([[location(0)]] position : vec4<f32>,\n        [[location(1)]] color : vec4<f32>) -> VertexOutput {\n    var fade : f32 = (uniforms.scalarOffset + time.value * uniforms.scalar / 10.0) % 1.0;\n    if (fade < 0.5) {\n        fade = fade * 2.0;\n    } else {\n        fade = (1.0 - fade) * 2.0;\n    }\n    var xpos : f32 = position.x * uniforms.scale;\n    var ypos : f32 = position.y * uniforms.scale;\n    var angle : f32 = 3.14159 * 2.0 * fade;\n    var xrot : f32 = xpos * cos(angle) - ypos * sin(angle);\n    var yrot : f32 = xpos * sin(angle) + ypos * cos(angle);\n    xpos = xrot + uniforms.offsetX;\n    ypos = yrot + uniforms.offsetY;\n    var output : VertexOutput;\n    output.v_color = vec4<f32>(fade, 1.0 - fade, 0.0, 1.0) + color;\n    output.Position = vec4<f32>(xpos, ypos, 0.0, 1.0);\n    return output;\n}\n",fragment:"\n[[stage(fragment)]]\nfn main([[location(0)]] v_color : vec4<f32>) -> [[location(0)]] vec4<f32> {\n  return v_color;\n}\n"};n.default=Object(s.c)({name:"Animometer",slug:"animometer",description:"A WebGPU of port of the Animometer MotionMark benchmark.",gui:!0,init:function(e,n){return f.apply(this,arguments)},source:"import type { GUI } from 'dat.gui';\nimport { makeBasicExample } from '../../components/basicExample';\n\nasync function init(canvas: HTMLCanvasElement, gui: GUI) {\n  const perfDisplayContainer = document.createElement('div');\n  perfDisplayContainer.style.color = 'white';\n  perfDisplayContainer.style.background = 'black';\n  perfDisplayContainer.style.position = 'absolute';\n  perfDisplayContainer.style.top = '10px';\n  perfDisplayContainer.style.left = '10px';\n\n  const perfDisplay = document.createElement('pre');\n  perfDisplayContainer.appendChild(perfDisplay);\n  canvas.parentNode.appendChild(perfDisplayContainer);\n\n  const params = new URLSearchParams(window.location.search);\n  const settings = {\n    numTriangles: Number(params.get('numTriangles')) || 20000,\n    renderBundles: Boolean(params.get('renderBundles')),\n    dynamicOffsets: Boolean(params.get('dynamicOffsets')),\n  };\n\n  const adapter = await navigator.gpu.requestAdapter();\n  const device = await adapter.requestDevice();\n\n  const context = canvas.getContext('gpupresent');\n\n  const devicePixelRatio = window.devicePixelRatio || 1;\n  const presentationSize = [\n    canvas.clientWidth * devicePixelRatio,\n    canvas.clientHeight * devicePixelRatio,\n  ];\n  const presentationFormat = context.getPreferredFormat(adapter);\n\n  context.configure({\n    device,\n    format: presentationFormat,\n    usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT,\n    size: presentationSize,\n  });\n\n  const timeBindGroupLayout = device.createBindGroupLayout({\n    entries: [\n      {\n        binding: 0,\n        visibility: GPUShaderStage.VERTEX,\n        buffer: {\n          type: 'uniform',\n          minBindingSize: 4,\n        },\n      },\n    ],\n  });\n\n  const bindGroupLayout = device.createBindGroupLayout({\n    entries: [\n      {\n        binding: 0,\n        visibility: GPUShaderStage.VERTEX,\n        buffer: {\n          type: 'uniform',\n          minBindingSize: 20,\n        },\n      },\n    ],\n  });\n\n  const dynamicBindGroupLayout = device.createBindGroupLayout({\n    entries: [\n      {\n        binding: 0,\n        visibility: GPUShaderStage.VERTEX,\n        buffer: {\n          type: 'uniform',\n          hasDynamicOffset: true,\n          minBindingSize: 20,\n        },\n      },\n    ],\n  });\n\n  const vec4Size = 4 * Float32Array.BYTES_PER_ELEMENT;\n  const pipelineLayout = device.createPipelineLayout({\n    bindGroupLayouts: [timeBindGroupLayout, bindGroupLayout],\n  });\n  const dynamicPipelineLayout = device.createPipelineLayout({\n    bindGroupLayouts: [timeBindGroupLayout, dynamicBindGroupLayout],\n  });\n  const pipelineDesc: GPURenderPipelineDescriptor = {\n    vertex: {\n      module: device.createShaderModule({\n        code: wgslShaders.vertex,\n      }),\n      entryPoint: 'main',\n      buffers: [\n        {\n          // vertex buffer\n          arrayStride: 2 * vec4Size,\n          stepMode: 'vertex',\n          attributes: [\n            {\n              // vertex positions\n              shaderLocation: 0,\n              offset: 0,\n              format: 'float32x4',\n            },\n            {\n              // vertex colors\n              shaderLocation: 1,\n              offset: vec4Size,\n              format: 'float32x4',\n            },\n          ],\n        },\n      ],\n    },\n    fragment: {\n      module: device.createShaderModule({\n        code: wgslShaders.fragment,\n      }),\n      entryPoint: 'main',\n      targets: [\n        {\n          format: presentationFormat,\n        },\n      ],\n    },\n    primitive: {\n      topology: 'triangle-list',\n      frontFace: 'ccw',\n      cullMode: 'none',\n    },\n  };\n\n  const pipeline = device.createRenderPipeline({\n    ...pipelineDesc,\n    layout: pipelineLayout,\n  });\n\n  const dynamicPipeline = device.createRenderPipeline({\n    ...pipelineDesc,\n    layout: dynamicPipelineLayout,\n  });\n\n  const vertexBuffer = device.createBuffer({\n    size: 2 * 3 * vec4Size,\n    usage: GPUBufferUsage.VERTEX,\n    mappedAtCreation: true,\n  });\n\n  // prettier-ignore\n  new Float32Array(vertexBuffer.getMappedRange()).set([\n    // position data  /**/ color data\n    0, 0.1, 0, 1,     /**/ 1, 0, 0, 1,\n    -0.1, -0.1, 0, 1, /**/ 0, 1, 0, 1,\n    0.1, -0.1, 0, 1,  /**/ 0, 0, 1, 1,\n  ]);\n  vertexBuffer.unmap();\n\n  function configure() {\n    const numTriangles = settings.numTriangles;\n    const uniformBytes = 5 * Float32Array.BYTES_PER_ELEMENT;\n    const alignedUniformBytes = Math.ceil(uniformBytes / 256) * 256;\n    const alignedUniformFloats =\n      alignedUniformBytes / Float32Array.BYTES_PER_ELEMENT;\n    const uniformBuffer = device.createBuffer({\n      size: numTriangles * alignedUniformBytes + Float32Array.BYTES_PER_ELEMENT,\n      usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.UNIFORM,\n    });\n    const uniformBufferData = new Float32Array(\n      numTriangles * alignedUniformFloats\n    );\n    const bindGroups = new Array(numTriangles);\n    for (let i = 0; i < numTriangles; ++i) {\n      uniformBufferData[alignedUniformFloats * i + 0] =\n        Math.random() * 0.2 + 0.2; // scale\n      uniformBufferData[alignedUniformFloats * i + 1] =\n        0.9 * 2 * (Math.random() - 0.5); // offsetX\n      uniformBufferData[alignedUniformFloats * i + 2] =\n        0.9 * 2 * (Math.random() - 0.5); // offsetY\n      uniformBufferData[alignedUniformFloats * i + 3] =\n        Math.random() * 1.5 + 0.5; // scalar\n      uniformBufferData[alignedUniformFloats * i + 4] = Math.random() * 10; // scalarOffset\n\n      bindGroups[i] = device.createBindGroup({\n        layout: bindGroupLayout,\n        entries: [\n          {\n            binding: 0,\n            resource: {\n              buffer: uniformBuffer,\n              offset: i * alignedUniformBytes,\n              size: 6 * Float32Array.BYTES_PER_ELEMENT,\n            },\n          },\n        ],\n      });\n    }\n\n    const dynamicBindGroup = device.createBindGroup({\n      layout: dynamicBindGroupLayout,\n      entries: [\n        {\n          binding: 0,\n          resource: {\n            buffer: uniformBuffer,\n            offset: 0,\n            size: 6 * Float32Array.BYTES_PER_ELEMENT,\n          },\n        },\n      ],\n    });\n\n    const timeOffset = numTriangles * alignedUniformBytes;\n    const timeBindGroup = device.createBindGroup({\n      layout: timeBindGroupLayout,\n      entries: [\n        {\n          binding: 0,\n          resource: {\n            buffer: uniformBuffer,\n            offset: timeOffset,\n            size: Float32Array.BYTES_PER_ELEMENT,\n          },\n        },\n      ],\n    });\n\n    // writeBuffer too large may OOM. TODO: The browser should internally chunk uploads.\n    const maxMappingLength =\n      (14 * 1024 * 1024) / Float32Array.BYTES_PER_ELEMENT;\n    for (\n      let offset = 0;\n      offset < uniformBufferData.length;\n      offset += maxMappingLength\n    ) {\n      const uploadCount = Math.min(\n        uniformBufferData.length - offset,\n        maxMappingLength\n      );\n\n      device.queue.writeBuffer(\n        uniformBuffer,\n        offset * Float32Array.BYTES_PER_ELEMENT,\n        uniformBufferData.buffer,\n        uniformBufferData.byteOffset + offset * Float32Array.BYTES_PER_ELEMENT,\n        uploadCount * Float32Array.BYTES_PER_ELEMENT\n      );\n    }\n\n    function recordRenderPass(\n      passEncoder: GPURenderBundleEncoder | GPURenderPassEncoder\n    ) {\n      if (settings.dynamicOffsets) {\n        passEncoder.setPipeline(dynamicPipeline);\n      } else {\n        passEncoder.setPipeline(pipeline);\n      }\n      passEncoder.setVertexBuffer(0, vertexBuffer);\n      passEncoder.setBindGroup(0, timeBindGroup);\n      const dynamicOffsets = [0];\n      for (let i = 0; i < numTriangles; ++i) {\n        if (settings.dynamicOffsets) {\n          dynamicOffsets[0] = i * alignedUniformBytes;\n          passEncoder.setBindGroup(1, dynamicBindGroup, dynamicOffsets);\n        } else {\n          passEncoder.setBindGroup(1, bindGroups[i]);\n        }\n        passEncoder.draw(3, 1, 0, 0);\n      }\n    }\n\n    let startTime = undefined;\n    const uniformTime = new Float32Array([0]);\n\n    const renderPassDescriptor: GPURenderPassDescriptor = {\n      colorAttachments: [\n        {\n          view: undefined, // Assigned later\n          loadValue: { r: 0.0, g: 0.0, b: 0.0, a: 1.0 },\n          storeOp: 'store',\n        },\n      ],\n    };\n\n    const renderBundleEncoder = device.createRenderBundleEncoder({\n      colorFormats: [presentationFormat],\n    });\n    recordRenderPass(renderBundleEncoder);\n    const renderBundle = renderBundleEncoder.finish();\n\n    return function doDraw(timestamp) {\n      if (startTime === undefined) {\n        startTime = timestamp;\n      }\n      uniformTime[0] = (timestamp - startTime) / 1000;\n      device.queue.writeBuffer(uniformBuffer, timeOffset, uniformTime.buffer);\n\n      renderPassDescriptor.colorAttachments[0].view = context\n        .getCurrentTexture()\n        .createView();\n\n      const commandEncoder = device.createCommandEncoder();\n      const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\n\n      if (settings.renderBundles) {\n        passEncoder.executeBundles([renderBundle]);\n      } else {\n        recordRenderPass(passEncoder);\n      }\n\n      passEncoder.endPass();\n      device.queue.submit([commandEncoder.finish()]);\n    };\n  }\n\n  let doDraw = configure();\n\n  const updateSettings = () => {\n    doDraw = configure();\n  };\n  gui\n    .add(settings, 'numTriangles', 0, 200000)\n    .step(1)\n    .onFinishChange(updateSettings);\n  gui.add(settings, 'renderBundles');\n  gui.add(settings, 'dynamicOffsets');\n\n  let previousFrameTimestamp = undefined;\n  let jsTimeAvg = undefined;\n  let frameTimeAvg = undefined;\n  let updateDisplay = true;\n\n  return function frame(timestamp) {\n    let frameTime = 0;\n    if (previousFrameTimestamp !== undefined) {\n      frameTime = timestamp - previousFrameTimestamp;\n    }\n    previousFrameTimestamp = timestamp;\n\n    const start = performance.now();\n    doDraw(timestamp);\n    const jsTime = performance.now() - start;\n    if (frameTimeAvg === undefined) {\n      frameTimeAvg = frameTime;\n    }\n    if (jsTimeAvg === undefined) {\n      jsTimeAvg = jsTime;\n    }\n\n    const w = 0.2;\n    frameTimeAvg = (1 - w) * frameTimeAvg + w * frameTime;\n    jsTimeAvg = (1 - w) * jsTimeAvg + w * jsTime;\n\n    if (updateDisplay) {\n      perfDisplay.innerHTML = `Avg Javascript: ${jsTimeAvg.toFixed(\n        2\n      )} ms\\nAvg Frame: ${frameTimeAvg.toFixed(2)} ms`;\n      updateDisplay = false;\n      setTimeout(() => {\n        updateDisplay = true;\n      }, 100);\n    }\n  };\n}\n\nconst wgslShaders = {\n  vertex: `\n[[block]] struct Time {\n  value : f32;\n};\n\n[[block]] struct Uniforms {\n  scale : f32;\n  offsetX : f32;\n  offsetY : f32;\n  scalar : f32;\n  scalarOffset : f32;\n};\n\n[[binding(0), group(0)]] var<uniform> time : Time;\n[[binding(0), group(1)]] var<uniform> uniforms : Uniforms;\n\nstruct VertexOutput {\n  [[builtin(position)]] Position : vec4<f32>;\n  [[location(0)]] v_color : vec4<f32>;\n};\n\n[[stage(vertex)]]\nfn main([[location(0)]] position : vec4<f32>,\n        [[location(1)]] color : vec4<f32>) -> VertexOutput {\n    var fade : f32 = (uniforms.scalarOffset + time.value * uniforms.scalar / 10.0) % 1.0;\n    if (fade < 0.5) {\n        fade = fade * 2.0;\n    } else {\n        fade = (1.0 - fade) * 2.0;\n    }\n    var xpos : f32 = position.x * uniforms.scale;\n    var ypos : f32 = position.y * uniforms.scale;\n    var angle : f32 = 3.14159 * 2.0 * fade;\n    var xrot : f32 = xpos * cos(angle) - ypos * sin(angle);\n    var yrot : f32 = xpos * sin(angle) + ypos * cos(angle);\n    xpos = xrot + uniforms.offsetX;\n    ypos = yrot + uniforms.offsetY;\n    var output : VertexOutput;\n    output.v_color = vec4<f32>(fade, 1.0 - fade, 0.0, 1.0) + color;\n    output.Position = vec4<f32>(xpos, ypos, 0.0, 1.0);\n    return output;\n}\n`,\n\n  fragment: `\n[[stage(fragment)]]\nfn main([[location(0)]] v_color : vec4<f32>) -> [[location(0)]] vec4<f32> {\n  return v_color;\n}\n`,\n};\n\nexport default makeBasicExample({\n  name: 'Animometer',\n  slug: 'animometer',\n  description: 'A WebGPU of port of the Animometer MotionMark benchmark.',\n  gui: true,\n  init,\n  source: __SOURCE__,\n});\n"})},a3WO:function(e,n,t){"use strict";function r(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}t.d(n,"a",(function(){return r}))}},[["5uvS",0,1,4,2,3]]]);