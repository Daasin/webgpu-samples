_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[15],{"1uVF":function(e,t,n){"use strict";n.d(t,"f",(function(){return r})),n.d(t,"b",(function(){return a})),n.d(t,"a",(function(){return o})),n.d(t,"c",(function(){return i})),n.d(t,"e",(function(){return c})),n.d(t,"d",(function(){return u}));var r=40,a=0,o=16,i=32,c=36,u=new Float32Array([1,-1,1,1,1,0,1,1,1,1,-1,-1,1,1,0,0,1,1,0,1,-1,-1,-1,1,0,0,0,1,0,0,1,-1,-1,1,1,0,0,1,1,0,1,-1,1,1,1,0,1,1,1,1,-1,-1,-1,1,0,0,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,0,1,1,0,1,1,-1,-1,1,1,0,0,1,0,0,1,1,-1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,-1,-1,1,1,0,0,1,0,0,-1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,-1,1,1,1,0,1,0,0,-1,1,-1,1,0,1,0,1,1,0,-1,1,1,1,0,1,1,1,1,1,1,1,-1,1,1,1,0,1,0,0,-1,-1,1,1,0,0,1,1,1,1,-1,1,1,1,0,1,1,1,0,1,-1,1,-1,1,0,1,0,1,0,0,-1,-1,-1,1,0,0,0,1,1,0,-1,-1,1,1,0,0,1,1,1,1,-1,1,-1,1,0,1,0,1,0,0,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,0,1,1,1,0,1,-1,-1,1,1,0,0,1,1,0,0,-1,-1,1,1,0,0,1,1,0,0,1,-1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,-1,-1,1,1,0,0,1,1,1,-1,-1,-1,1,0,0,0,1,0,1,-1,1,-1,1,0,1,0,1,0,0,1,1,-1,1,1,1,0,1,1,0,1,-1,-1,1,1,0,0,1,1,1,-1,1,-1,1,0,1,0,1,0,0])},O1S9:function(e,t,n){e.exports={shaderEditor:"BasicExample_shaderEditor__2wVi1",updateShaderBtn:"BasicExample_updateShaderBtn__Qgygo",canvasContainer:"BasicExample_canvasContainer__3e5KH"}},SoUo:function(e,t,n){"use strict";n.d(t,"b",(function(){return C})),n.d(t,"a",(function(){return U})),n.d(t,"c",(function(){return B}));var r=n("a3WO");var a=n("BsWD");function o(e){return function(e){if(Array.isArray(e))return Object(r.a)(e)}(e)||function(e){if("undefined"!==typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||Object(a.a)(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}var i=n("nKUr");function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=n("o0o1"),s=n.n(u),f=n("HaE+");function p(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function l(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function d(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function m(e,t){return(m=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function h(e){return(h="function"===typeof Symbol&&"symbol"===typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"===typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function g(e,t){return!t||"object"!==h(t)&&"function"!==typeof t?d(e):t}function v(e){return(v=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var b=n("rePB"),x=n("g4pe"),y=n.n(x),w=n("q1tI"),O=n.n(w),j=n("O1S9"),P=n.n(j);function S(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function E(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?S(Object(n),!0).forEach((function(t){Object(b.a)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):S(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function T(e){var t=function(){if("undefined"===typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"===typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=v(e);if(t){var a=v(this).constructor;n=Reflect.construct(r,arguments,a)}else n=r.apply(this,arguments);return g(this,n)}}var C=600,U=600;n("+dQi");var V=n("VrN/"),M=n("7QzT").setShaderRegisteredCallback,_=function(e){!function(e,t){if("function"!==typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&m(e,t)}(u,e);var t,r,a,o=T(u);function u(){var e;p(this,u);for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return e=o.call.apply(o,[this].concat(n)),Object(b.a)(d(e),"stopRunning",!1),Object(b.a)(d(e),"canvasRef",O.a.createRef()),e}return t=u,(r=[{key:"componentDidMount",value:function(){var e=this,t=void 0;this.props.gui&&(t=new(n("iZKT").GUI)({autoPlace:!1}),this.canvasRef.current.parentNode.appendChild(t.domElement),t.domElement.style.position="absolute",t.domElement.style.top="10px",t.domElement.style.right="10px");var r=0;M(function(){var t=Object(f.a)(s.a.mark((function t(n,a){var o;return s.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:o={value:n,lineNumbers:!0,lineWrapping:!0,theme:"monokai"},e.props.addShaderEditor(Object(i.jsx)("div",{className:P.a.shaderEditor,ref:function(e){if(e){var t=V(e,o);t.updatedSource=a;var n=e.firstElementChild,r=document.createElement("button");r.className=P.a.updateShaderBtn,r.innerHTML="Update shader",r.onclick=function(){return a(t.getValue())},n.prepend(r)}}},n+r++));case 2:case"end":return t.stop()}}),t)})));return function(e,n){return t.apply(this,arguments)}}()),this.canvasRef.current&&this.props.init(this.canvasRef.current,t).then((function(t){requestAnimationFrame((function n(r){e.stopRunning||(t(r),requestAnimationFrame(n))}))}))}},{key:"componentWillUnmount",value:function(){this.stopRunning=!0}},{key:"render",value:function(){var e=this.props,t=(e.gui,e.init,e.addShaderEditor,c(e,["gui","init","addShaderEditor"]));return Object(i.jsx)("canvas",E(E({},t),{},{ref:this.canvasRef}))}}])&&l(t.prototype,r),a&&l(t,a),u}(O.a.Component);function B(e){return function(){var t=Object(w.useState)("undefined"!==typeof navigator&&!!navigator.gpu),n=t[0],r=t[1],a=function(){var t=Object(f.a)(s.a.mark((function t(n,a){return s.a.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,e.init(n,a);case 3:return t.abrupt("return",t.sent);case 6:t.prev=6,t.t0=t.catch(0),console.error(t.t0),r(!1);case 10:case"end":return t.stop()}}),t,null,[[0,6]])})));return function(e,n){return t.apply(this,arguments)}}(),c=Object(w.useState)([]),u=c[0],p=c[1],l=Object(w.useMemo)((function(){return Object(i.jsx)("div",{ref:function(t){var n={value:e.source,readOnly:!0,lineNumbers:!0,lineWrapping:!0,theme:"monokai",mode:"text/typescript"};V(t,n)}})}),[]);return Object(i.jsxs)("main",{children:[Object(i.jsxs)(y.a,{children:[Object(i.jsx)("style",{dangerouslySetInnerHTML:{__html:"\n            .CodeMirror {\n              height: auto !important;\n              margin: 1em 0;\n            }\n\n            .CodeMirror-scroll {\n              height: auto !important;\n              overflow: visible !important;\n            }\n          "}}),Object(i.jsx)("title",{children:"".concat(e.name," - WebGPU Samples")}),Object(i.jsx)("meta",{name:"description",content:e.description})]}),Object(i.jsxs)("div",{children:[Object(i.jsx)("h1",{children:e.name}),Object(i.jsx)("a",{target:"_blank",rel:"noreferrer",href:"https://github.com/austinEng/webgpu-samples/tree/main/src/pages/samples/".concat(e.slug,".ts"),children:"See it on Github!"}),Object(i.jsx)("p",{children:e.description}),n?null:Object(i.jsxs)(i.Fragment,{children:[Object(i.jsx)("p",{children:"Is WebGPU enabled?"}),Object(i.jsxs)("p",{children:["WebGPU or this example is not supported! Please visit"," ",Object(i.jsx)("a",{href:"//webgpu.io",children:"webgpu.io"})," to see the current implementation status."]})]})]}),Object(i.jsx)("div",{className:P.a.canvasContainer,children:n?Object(i.jsx)(_,{init:a,gui:e.gui,addShaderEditor:function(e){return p([].concat(o(u),[e]))},width:C,height:U}):Object(i.jsx)("canvas",{width:C,height:U})}),Object(i.jsxs)("div",{children:[u,l]})]})}}},ZYMQ:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/samples/fractalCube",function(){return n("xsd4")}])},xsd4:function(e,t,n){"use strict";n.r(t);var r=n("o0o1"),a=n.n(r),o=n("HaE+"),i=n("IOcx"),c=n("1uVF"),u=n("SoUo");function s(){return(s=Object(o.a)(a.a.mark((function e(t){var n,r,o,u,s,p,l,d,m,h,g,v,b,x,y;return a.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return y=function(){var e=i.a.create();i.a.translate(e,e,i.b.fromValues(0,0,-4));var t=Date.now()/1e3;i.a.rotate(e,e,1,i.b.fromValues(Math.sin(t),Math.cos(t),0));var n=i.a.create();return i.a.multiply(n,u,e),n},e.next=3,navigator.gpu.requestAdapter();case 3:return n=e.sent,e.next=6,n.requestDevice();case 6:return r=e.sent,o=Math.abs(t.width/t.height),u=i.a.create(),i.a.perspective(u,2*Math.PI/5,o,1,100),s=t.getContext("gpupresent"),p=s.configureSwapChain({device:r,format:"bgra8unorm",usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_SRC}),l=r.createBuffer({size:c.d.byteLength,usage:GPUBufferUsage.VERTEX,mappedAtCreation:!0}),new Float32Array(l.getMappedRange()).set(c.d),l.unmap(),d=r.createRenderPipeline({vertex:{module:r.createShaderModule({code:f.vertex}),entryPoint:"main",buffers:[{arrayStride:c.f,attributes:[{shaderLocation:0,offset:c.b,format:"float32x4"},{shaderLocation:1,offset:c.a,format:"float32x4"},{shaderLocation:2,offset:c.c,format:"float32x2"}]}]},fragment:{module:r.createShaderModule({code:f.fragment}),entryPoint:"main",targets:[{format:"bgra8unorm"}]},primitive:{topology:"triangle-list",cullMode:"back"},depthStencil:{depthWriteEnabled:!0,depthCompare:"less",format:"depth24plus-stencil8"}}),m=r.createTexture({size:{width:t.width,height:t.height},format:"depth24plus-stencil8",usage:GPUTextureUsage.RENDER_ATTACHMENT}),h={colorAttachments:[{view:void 0,loadValue:{r:.5,g:.5,b:.5,a:1},storeOp:"store"}],depthStencilAttachment:{view:m.createView(),depthLoadValue:1,depthStoreOp:"store",stencilLoadValue:0,stencilStoreOp:"store"}},64,g=r.createBuffer({size:64,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),v=r.createTexture({size:{width:t.width,height:t.height},format:"bgra8unorm",usage:GPUTextureUsage.COPY_DST|GPUTextureUsage.SAMPLED}),b=r.createSampler({magFilter:"linear",minFilter:"linear"}),x=r.createBindGroup({layout:d.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:g}},{binding:1,resource:b},{binding:2,resource:v.createView()}]}),e.abrupt("return",(function(){var e=y();r.queue.writeBuffer(g,0,e.buffer,e.byteOffset,e.byteLength);var n=p.getCurrentTexture();h.colorAttachments[0].view=n.createView();var a=r.createCommandEncoder(),o=a.beginRenderPass(h);o.setPipeline(d),o.setBindGroup(0,x),o.setVertexBuffer(0,l),o.draw(c.e,1,0,0),o.endPass(),a.copyTextureToTexture({texture:n},{texture:v},{width:t.width,height:t.height}),r.queue.submit([a.finish()])}));case 24:case"end":return e.stop()}}),e)})))).apply(this,arguments)}var f={vertex:"\n[[block]] struct Uniforms {\n  modelViewProjectionMatrix : mat4x4<f32>;\n};\n[[binding(0), group(0)]] var<uniform> uniforms : Uniforms;\n\nstruct VertexInput {\n  [[location(0)]] position : vec4<f32>;\n  [[location(1)]] color : vec4<f32>;\n  [[location(2)]] uv : vec2<f32>;\n};\n\nstruct VertexOutput {\n  [[builtin(position)]] Position : vec4<f32>;\n  [[location(0)]] fragColor : vec4<f32>;\n  [[location(1)]] fragUV: vec2<f32>;\n};\n\n[[stage(vertex)]]\nfn main(input : VertexInput) -> VertexOutput {\n  var output : VertexOutput;\n  output.Position = uniforms.modelViewProjectionMatrix * input.position;\n  output.fragColor = input.color;\n  output.fragUV = input.uv;\n  return output;\n}\n",fragment:"\n[[binding(1), group(0)]] var mySampler: sampler;\n[[binding(2), group(0)]] var myTexture: texture_2d<f32>;\n\nstruct FragmentInput {\n  [[location(0)]] fragColor: vec4<f32>;\n  [[location(1)]] fragUV: vec2<f32>;\n};\n\n[[stage(fragment)]]\nfn main(input : FragmentInput) -> [[location(0)]] vec4<f32> {\n  var texColor : vec4<f32> = textureSample(myTexture, mySampler, input.fragUV * 0.8 + vec2<f32>(0.1, 0.1));\n  var f : f32;\n  if (length(texColor.rgb - vec3<f32>(0.5, 0.5, 0.5)) < 0.01) {\n    f = 1.0;\n  } else {\n    f = 0.0;\n  }\n  return (1.0 - f) * texColor + f * input.fragColor;\n}\n"};t.default=Object(u.c)({name:"Fractal Cube",description:"This example uses the previous frame's rendering result                 as the source texture for the next frame.",slug:"fractalCube",init:function(e){return s.apply(this,arguments)},source:"import { mat4, vec3 } from 'gl-matrix';\nimport {\n  cubeVertexArray,\n  cubeVertexSize,\n  cubeColorOffset,\n  cubeUVOffset,\n  cubePositionOffset,\n  cubeVertexCount,\n} from '../../meshes/cube';\nimport { makeBasicExample } from '../../components/basicExample';\n\nasync function init(canvas: HTMLCanvasElement) {\n  const adapter = await navigator.gpu.requestAdapter();\n  const device = await adapter.requestDevice();\n\n  const aspect = Math.abs(canvas.width / canvas.height);\n  const projectionMatrix = mat4.create();\n  mat4.perspective(projectionMatrix, (2 * Math.PI) / 5, aspect, 1, 100.0);\n\n  const context = canvas.getContext('gpupresent');\n\n  const swapChain = context.configureSwapChain({\n    device,\n    format: 'bgra8unorm',\n    usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n  });\n\n  const verticesBuffer = device.createBuffer({\n    size: cubeVertexArray.byteLength,\n    usage: GPUBufferUsage.VERTEX,\n    mappedAtCreation: true,\n  });\n  new Float32Array(verticesBuffer.getMappedRange()).set(cubeVertexArray);\n  verticesBuffer.unmap();\n\n  const pipeline = device.createRenderPipeline({\n    vertex: {\n      module: device.createShaderModule({\n        code: wgslShaders.vertex,\n      }),\n      entryPoint: 'main',\n      buffers: [\n        {\n          arrayStride: cubeVertexSize,\n          attributes: [\n            {\n              // position\n              shaderLocation: 0,\n              offset: cubePositionOffset,\n              format: 'float32x4',\n            },\n            {\n              // color\n              shaderLocation: 1,\n              offset: cubeColorOffset,\n              format: 'float32x4',\n            },\n            {\n              // uv\n              shaderLocation: 2,\n              offset: cubeUVOffset,\n              format: 'float32x2',\n            },\n          ],\n        },\n      ],\n    },\n    fragment: {\n      module: device.createShaderModule({\n        code: wgslShaders.fragment,\n      }),\n      entryPoint: 'main',\n      targets: [\n        {\n          format: 'bgra8unorm',\n        },\n      ],\n    },\n    primitive: {\n      topology: 'triangle-list',\n      cullMode: 'back',\n    },\n    depthStencil: {\n      depthWriteEnabled: true,\n      depthCompare: 'less',\n      format: 'depth24plus-stencil8',\n    },\n  });\n\n  const depthTexture = device.createTexture({\n    size: { width: canvas.width, height: canvas.height },\n    format: 'depth24plus-stencil8',\n    usage: GPUTextureUsage.RENDER_ATTACHMENT,\n  });\n\n  const renderPassDescriptor: GPURenderPassDescriptor = {\n    colorAttachments: [\n      {\n        view: undefined, // Attachment is set later\n        loadValue: { r: 0.5, g: 0.5, b: 0.5, a: 1.0 },\n        storeOp: 'store',\n      },\n    ],\n    depthStencilAttachment: {\n      view: depthTexture.createView(),\n\n      depthLoadValue: 1.0,\n      depthStoreOp: 'store',\n      stencilLoadValue: 0,\n      stencilStoreOp: 'store',\n    },\n  };\n\n  const uniformBufferSize = 4 * 16; // 4x4 matrix\n  const uniformBuffer = device.createBuffer({\n    size: uniformBufferSize,\n    usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\n  });\n\n  const cubeTexture = device.createTexture({\n    size: { width: canvas.width, height: canvas.height },\n    format: 'bgra8unorm',\n    usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.SAMPLED,\n  });\n\n  const sampler = device.createSampler({\n    magFilter: 'linear',\n    minFilter: 'linear',\n  });\n\n  const uniformBindGroup = device.createBindGroup({\n    layout: pipeline.getBindGroupLayout(0),\n    entries: [\n      {\n        binding: 0,\n        resource: {\n          buffer: uniformBuffer,\n        },\n      },\n      {\n        binding: 1,\n        resource: sampler,\n      },\n      {\n        binding: 2,\n        resource: cubeTexture.createView(),\n      },\n    ],\n  });\n\n  function getTransformationMatrix() {\n    const viewMatrix = mat4.create();\n    mat4.translate(viewMatrix, viewMatrix, vec3.fromValues(0, 0, -4));\n    const now = Date.now() / 1000;\n    mat4.rotate(\n      viewMatrix,\n      viewMatrix,\n      1,\n      vec3.fromValues(Math.sin(now), Math.cos(now), 0)\n    );\n\n    const modelViewProjectionMatrix = mat4.create();\n    mat4.multiply(modelViewProjectionMatrix, projectionMatrix, viewMatrix);\n\n    return modelViewProjectionMatrix as Float32Array;\n  }\n\n  return function frame() {\n    const transformationMatrix = getTransformationMatrix();\n    device.queue.writeBuffer(\n      uniformBuffer,\n      0,\n      transformationMatrix.buffer,\n      transformationMatrix.byteOffset,\n      transformationMatrix.byteLength\n    );\n\n    const swapChainTexture = swapChain.getCurrentTexture();\n    renderPassDescriptor.colorAttachments[0].view = swapChainTexture.createView();\n\n    const commandEncoder = device.createCommandEncoder();\n\n    const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\n    passEncoder.setPipeline(pipeline);\n    passEncoder.setBindGroup(0, uniformBindGroup);\n    passEncoder.setVertexBuffer(0, verticesBuffer);\n    passEncoder.draw(cubeVertexCount, 1, 0, 0);\n    passEncoder.endPass();\n\n    commandEncoder.copyTextureToTexture(\n      {\n        texture: swapChainTexture,\n      },\n      {\n        texture: cubeTexture,\n      },\n      {\n        width: canvas.width,\n        height: canvas.height,\n      }\n    );\n\n    device.queue.submit([commandEncoder.finish()]);\n  };\n}\n\nconst wgslShaders = {\n  vertex: `\n[[block]] struct Uniforms {\n  modelViewProjectionMatrix : mat4x4<f32>;\n};\n[[binding(0), group(0)]] var<uniform> uniforms : Uniforms;\n\nstruct VertexInput {\n  [[location(0)]] position : vec4<f32>;\n  [[location(1)]] color : vec4<f32>;\n  [[location(2)]] uv : vec2<f32>;\n};\n\nstruct VertexOutput {\n  [[builtin(position)]] Position : vec4<f32>;\n  [[location(0)]] fragColor : vec4<f32>;\n  [[location(1)]] fragUV: vec2<f32>;\n};\n\n[[stage(vertex)]]\nfn main(input : VertexInput) -> VertexOutput {\n  var output : VertexOutput;\n  output.Position = uniforms.modelViewProjectionMatrix * input.position;\n  output.fragColor = input.color;\n  output.fragUV = input.uv;\n  return output;\n}\n`,\n\n  fragment: `\n[[binding(1), group(0)]] var mySampler: sampler;\n[[binding(2), group(0)]] var myTexture: texture_2d<f32>;\n\nstruct FragmentInput {\n  [[location(0)]] fragColor: vec4<f32>;\n  [[location(1)]] fragUV: vec2<f32>;\n};\n\n[[stage(fragment)]]\nfn main(input : FragmentInput) -> [[location(0)]] vec4<f32> {\n  var texColor : vec4<f32> = textureSample(myTexture, mySampler, input.fragUV * 0.8 + vec2<f32>(0.1, 0.1));\n  var f : f32;\n  if (length(texColor.rgb - vec3<f32>(0.5, 0.5, 0.5)) < 0.01) {\n    f = 1.0;\n  } else {\n    f = 0.0;\n  }\n  return (1.0 - f) * texColor + f * input.fragColor;\n}\n`,\n};\n\nexport default makeBasicExample({\n  name: 'Fractal Cube',\n  description:\n    \"This example uses the previous frame's rendering result \\\n                as the source texture for the next frame.\",\n  slug: 'fractalCube',\n  init,\n  source: __SOURCE__,\n});\n"})}},[["ZYMQ",0,1,4,2,3,5]]]);