_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[22],{"1uVF":function(e,n,t){"use strict";t.d(n,"f",(function(){return r})),t.d(n,"b",(function(){return a})),t.d(n,"a",(function(){return i})),t.d(n,"c",(function(){return o})),t.d(n,"e",(function(){return u})),t.d(n,"d",(function(){return s}));var r=40,a=0,i=16,o=32,u=36,s=new Float32Array([1,-1,1,1,1,0,1,1,1,1,-1,-1,1,1,0,0,1,1,0,1,-1,-1,-1,1,0,0,0,1,0,0,1,-1,-1,1,1,0,0,1,1,0,1,-1,1,1,1,0,1,1,1,1,-1,-1,-1,1,0,0,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,0,1,1,0,1,1,-1,-1,1,1,0,0,1,0,0,1,1,-1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,-1,-1,1,1,0,0,1,0,0,-1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,-1,1,1,1,0,1,0,0,-1,1,-1,1,0,1,0,1,1,0,-1,1,1,1,0,1,1,1,1,1,1,1,-1,1,1,1,0,1,0,0,-1,-1,1,1,0,0,1,1,1,1,-1,1,1,1,0,1,1,1,0,1,-1,1,-1,1,0,1,0,1,0,0,-1,-1,-1,1,0,0,0,1,1,0,-1,-1,1,1,0,0,1,1,1,1,-1,1,-1,1,0,1,0,1,0,0,1,1,1,1,1,1,1,1,1,1,-1,1,1,1,0,1,1,1,0,1,-1,-1,1,1,0,0,1,1,0,0,-1,-1,1,1,0,0,1,1,0,0,1,-1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,-1,-1,1,1,0,0,1,1,1,-1,-1,-1,1,0,0,0,1,0,1,-1,1,-1,1,0,1,0,1,0,0,1,1,-1,1,1,1,0,1,1,0,1,-1,-1,1,1,0,0,1,1,1,-1,1,-1,1,0,1,0,1,0,0])},bgyd:function(e,n,t){"use strict";t.r(n);var r=t("o0o1"),a=t.n(r),i=t("HaE+"),o=t("IOcx"),u=t("SoUo"),s=t("1uVF");function c(){return(c=Object(i.a)(a.a.mark((function e(n){var r,i,u,c,p,d,m,l,g,x,v,b,h,w,P,y,T,V,S;return a.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return S=function(){var e=o.a.create();o.a.translate(e,e,o.b.fromValues(0,0,-4));var n=Date.now()/1e3;o.a.rotate(e,e,1,o.b.fromValues(Math.sin(n),Math.cos(n),0));var t=o.a.create();return o.a.multiply(t,c,e),t},e.next=3,navigator.gpu.requestAdapter();case 3:return r=e.sent,e.next=6,r.requestDevice();case 6:return i=e.sent,u=Math.abs(n.width/n.height),c=o.a.create(),o.a.perspective(c,2*Math.PI/5,u,1,100),p=n.getContext("gpupresent"),d=p.configureSwapChain({device:i,format:"bgra8unorm"}),m=i.createBuffer({size:s.d.byteLength,usage:GPUBufferUsage.VERTEX,mappedAtCreation:!0}),new Float32Array(m.getMappedRange()).set(s.d),m.unmap(),l=i.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.VERTEX,buffer:{type:"uniform"}},{binding:1,visibility:GPUShaderStage.FRAGMENT,sampler:{type:"filtering"}},{binding:2,visibility:GPUShaderStage.FRAGMENT,texture:{sampleType:"float"}}]}),g=i.createPipelineLayout({bindGroupLayouts:[l]}),x=i.createRenderPipeline({layout:g,vertex:{module:i.createShaderModule({code:f.vertex}),entryPoint:"main",buffers:[{arrayStride:s.f,attributes:[{shaderLocation:0,offset:s.b,format:"float32x4"},{shaderLocation:1,offset:s.c,format:"float32x2"}]}]},fragment:{module:i.createShaderModule({code:f.fragment}),entryPoint:"main",targets:[{format:"bgra8unorm"}]},primitive:{topology:"triangle-list",cullMode:"back"},depthStencil:{depthWriteEnabled:!0,depthCompare:"less",format:"depth24plus-stencil8"}}),v=i.createTexture({size:{width:n.width,height:n.height},format:"depth24plus-stencil8",usage:GPUTextureUsage.RENDER_ATTACHMENT}),b={colorAttachments:[{view:void 0,loadValue:{r:.5,g:.5,b:.5,a:1},storeOp:"store"}],depthStencilAttachment:{view:v.createView(),depthLoadValue:1,depthStoreOp:"store",stencilLoadValue:0,stencilStoreOp:"store"}},64,h=i.createBuffer({size:64,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),(P=document.createElement("img")).src=t("neuz"),e.next=26,P.decode();case 26:return e.next=28,createImageBitmap(P);case 28:return y=e.sent,w=i.createTexture({size:[y.width,y.height,1],format:"rgba8unorm",usage:GPUTextureUsage.SAMPLED|GPUTextureUsage.COPY_DST}),i.queue.copyImageBitmapToTexture({imageBitmap:y},{texture:w},[y.width,y.height,1]),T=i.createSampler({magFilter:"linear",minFilter:"linear"}),V=i.createBindGroup({layout:x.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:h}},{binding:1,resource:T},{binding:2,resource:w.createView()}]}),e.abrupt("return",(function(){var e=S();i.queue.writeBuffer(h,0,e.buffer,e.byteOffset,e.byteLength),b.colorAttachments[0].view=d.getCurrentTexture().createView();var n=i.createCommandEncoder(),t=n.beginRenderPass(b);t.setPipeline(x),t.setBindGroup(0,V),t.setVertexBuffer(0,m),t.draw(s.e,1,0,0),t.endPass(),i.queue.submit([n.finish()])}));case 34:case"end":return e.stop()}}),e)})))).apply(this,arguments)}var f={vertex:"\n[[block]] struct Uniforms {\n  modelViewProjectionMatrix : mat4x4<f32>;\n};\n[[binding(0), group(0)]] var<uniform> uniforms : Uniforms;\n\nstruct VertexOutput {\n  [[builtin(position)]] Position : vec4<f32>;\n  [[location(0)]] fragUV : vec2<f32>;\n  [[location(1)]] fragPosition: vec4<f32>;\n};\n\n[[stage(vertex)]]\nfn main([[location(0)]] position : vec4<f32>,\n        [[location(1)]] uv : vec2<f32> ) -> VertexOutput {\n  var output : VertexOutput;\n  output.fragPosition = 0.5 * (position + vec4<f32>(1.0, 1.0, 1.0, 1.0));\n  output.Position = uniforms.modelViewProjectionMatrix * position;\n  output.fragUV = uv;\n  return output;\n}\n",fragment:"\n[[binding(1), group(0)]] var mySampler: sampler;\n[[binding(2), group(0)]] var myTexture: texture_2d<f32>;\n\n[[stage(fragment)]]\nfn main([[location(0)]] fragUV: vec2<f32>,\n        [[location(1)]] fragPosition: vec4<f32>) -> [[location(0)]] vec4<f32> {\n  return textureSample(myTexture, mySampler, fragUV) * fragPosition;\n}\n"};n.default=Object(u.c)({name:"Textured Cube",description:"This example shows how to bind and sample textures.",slug:"texturedCube",init:function(e){return c.apply(this,arguments)},source:"import { mat4, vec3 } from 'gl-matrix';\nimport { makeBasicExample } from '../../components/basicExample';\nimport {\n  cubeVertexArray,\n  cubeVertexSize,\n  cubeUVOffset,\n  cubePositionOffset,\n  cubeVertexCount,\n} from '../../meshes/cube';\n\nasync function init(canvas: HTMLCanvasElement) {\n  const adapter = await navigator.gpu.requestAdapter();\n  const device = await adapter.requestDevice();\n\n  const aspect = Math.abs(canvas.width / canvas.height);\n  const projectionMatrix = mat4.create();\n  mat4.perspective(projectionMatrix, (2 * Math.PI) / 5, aspect, 1, 100.0);\n\n  const context = canvas.getContext('gpupresent');\n\n  const swapChain = context.configureSwapChain({\n    device,\n    format: 'bgra8unorm',\n  });\n\n  const verticesBuffer = device.createBuffer({\n    size: cubeVertexArray.byteLength,\n    usage: GPUBufferUsage.VERTEX,\n    mappedAtCreation: true,\n  });\n  new Float32Array(verticesBuffer.getMappedRange()).set(cubeVertexArray);\n  verticesBuffer.unmap();\n\n  const bindGroupLayout = device.createBindGroupLayout({\n    entries: [\n      {\n        // Transform\n        binding: 0,\n        visibility: GPUShaderStage.VERTEX,\n        buffer: {\n          type: 'uniform',\n        },\n      },\n      {\n        // Sampler\n        binding: 1,\n        visibility: GPUShaderStage.FRAGMENT,\n        sampler: {\n          type: 'filtering',\n        },\n      },\n      {\n        // Texture view\n        binding: 2,\n        visibility: GPUShaderStage.FRAGMENT,\n        texture: {\n          sampleType: 'float',\n        },\n      },\n    ],\n  });\n\n  const pipelineLayout = device.createPipelineLayout({\n    bindGroupLayouts: [bindGroupLayout],\n  });\n\n  const pipeline = device.createRenderPipeline({\n    layout: pipelineLayout,\n\n    vertex: {\n      module: device.createShaderModule({\n        code: wgslShaders.vertex,\n      }),\n      entryPoint: 'main',\n      buffers: [\n        {\n          arrayStride: cubeVertexSize,\n          attributes: [\n            {\n              // position\n              shaderLocation: 0,\n              offset: cubePositionOffset,\n              format: 'float32x4',\n            },\n            {\n              // uv\n              shaderLocation: 1,\n              offset: cubeUVOffset,\n              format: 'float32x2',\n            },\n          ],\n        },\n      ],\n    },\n    fragment: {\n      module: device.createShaderModule({\n        code: wgslShaders.fragment,\n      }),\n      entryPoint: 'main',\n      targets: [\n        {\n          format: 'bgra8unorm',\n        },\n      ],\n    },\n    primitive: {\n      topology: 'triangle-list',\n      cullMode: 'back',\n    },\n    depthStencil: {\n      depthWriteEnabled: true,\n      depthCompare: 'less',\n      format: 'depth24plus-stencil8',\n    },\n  });\n\n  const depthTexture = device.createTexture({\n    size: { width: canvas.width, height: canvas.height },\n    format: 'depth24plus-stencil8',\n    usage: GPUTextureUsage.RENDER_ATTACHMENT,\n  });\n\n  const renderPassDescriptor: GPURenderPassDescriptor = {\n    colorAttachments: [\n      {\n        view: undefined, // Assigned later\n\n        loadValue: { r: 0.5, g: 0.5, b: 0.5, a: 1.0 },\n        storeOp: 'store',\n      },\n    ],\n    depthStencilAttachment: {\n      view: depthTexture.createView(),\n\n      depthLoadValue: 1.0,\n      depthStoreOp: 'store',\n      stencilLoadValue: 0,\n      stencilStoreOp: 'store',\n    },\n  };\n\n  const uniformBufferSize = 4 * 16; // 4x4 matrix\n  const uniformBuffer = device.createBuffer({\n    size: uniformBufferSize,\n    usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\n  });\n\n  let cubeTexture: GPUTexture;\n  {\n    const img = document.createElement('img');\n    img.src = require('../../../assets/img/Di-3d.png');\n    await img.decode();\n    const imageBitmap = await createImageBitmap(img);\n\n    cubeTexture = device.createTexture({\n      size: [imageBitmap.width, imageBitmap.height, 1],\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.SAMPLED | GPUTextureUsage.COPY_DST,\n    });\n    device.queue.copyImageBitmapToTexture(\n      { imageBitmap },\n      { texture: cubeTexture },\n      [imageBitmap.width, imageBitmap.height, 1]\n    );\n  }\n\n  const sampler = device.createSampler({\n    magFilter: 'linear',\n    minFilter: 'linear',\n  });\n\n  const uniformBindGroup = device.createBindGroup({\n    layout: pipeline.getBindGroupLayout(0),\n    entries: [\n      {\n        binding: 0,\n        resource: {\n          buffer: uniformBuffer,\n        },\n      },\n      {\n        binding: 1,\n        resource: sampler,\n      },\n      {\n        binding: 2,\n        resource: cubeTexture.createView(),\n      },\n    ],\n  });\n\n  function getTransformationMatrix() {\n    const viewMatrix = mat4.create();\n    mat4.translate(viewMatrix, viewMatrix, vec3.fromValues(0, 0, -4));\n    const now = Date.now() / 1000;\n    mat4.rotate(\n      viewMatrix,\n      viewMatrix,\n      1,\n      vec3.fromValues(Math.sin(now), Math.cos(now), 0)\n    );\n\n    const modelViewProjectionMatrix = mat4.create();\n    mat4.multiply(modelViewProjectionMatrix, projectionMatrix, viewMatrix);\n\n    return modelViewProjectionMatrix as Float32Array;\n  }\n\n  return function frame() {\n    const transformationMatrix = getTransformationMatrix();\n    device.queue.writeBuffer(\n      uniformBuffer,\n      0,\n      transformationMatrix.buffer,\n      transformationMatrix.byteOffset,\n      transformationMatrix.byteLength\n    );\n    renderPassDescriptor.colorAttachments[0].view = swapChain\n      .getCurrentTexture()\n      .createView();\n\n    const commandEncoder = device.createCommandEncoder();\n    const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\n    passEncoder.setPipeline(pipeline);\n    passEncoder.setBindGroup(0, uniformBindGroup);\n    passEncoder.setVertexBuffer(0, verticesBuffer);\n    passEncoder.draw(cubeVertexCount, 1, 0, 0);\n    passEncoder.endPass();\n    device.queue.submit([commandEncoder.finish()]);\n  };\n}\n\nconst wgslShaders = {\n  vertex: `\n[[block]] struct Uniforms {\n  modelViewProjectionMatrix : mat4x4<f32>;\n};\n[[binding(0), group(0)]] var<uniform> uniforms : Uniforms;\n\nstruct VertexOutput {\n  [[builtin(position)]] Position : vec4<f32>;\n  [[location(0)]] fragUV : vec2<f32>;\n  [[location(1)]] fragPosition: vec4<f32>;\n};\n\n[[stage(vertex)]]\nfn main([[location(0)]] position : vec4<f32>,\n        [[location(1)]] uv : vec2<f32> ) -> VertexOutput {\n  var output : VertexOutput;\n  output.fragPosition = 0.5 * (position + vec4<f32>(1.0, 1.0, 1.0, 1.0));\n  output.Position = uniforms.modelViewProjectionMatrix * position;\n  output.fragUV = uv;\n  return output;\n}\n`,\n  fragment: `\n[[binding(1), group(0)]] var mySampler: sampler;\n[[binding(2), group(0)]] var myTexture: texture_2d<f32>;\n\n[[stage(fragment)]]\nfn main([[location(0)]] fragUV: vec2<f32>,\n        [[location(1)]] fragPosition: vec4<f32>) -> [[location(0)]] vec4<f32> {\n  return textureSample(myTexture, mySampler, fragUV) * fragPosition;\n}\n`,\n};\n\nexport default makeBasicExample({\n  name: 'Textured Cube',\n  description: 'This example shows how to bind and sample textures.',\n  slug: 'texturedCube',\n  init,\n  source: __SOURCE__,\n});\n"})},neuz:function(e,n){e.exports="/webgpu-samples/_next/static/e04932ba9c013b60ddb249577c386914.png"},"u+5N":function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/samples/texturedCube",function(){return t("bgyd")}])}},[["u+5N",0,1,4,2,3,5]]]);